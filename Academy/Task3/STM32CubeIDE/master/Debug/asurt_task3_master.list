
asurt_task3_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032e0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080033f0  080033f0  000043f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034a8  080034a8  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080034a8  080034a8  000044a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034b0  080034b0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034b0  080034b0  000044b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034b4  080034b4  000044b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080034b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000005c  08003514  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08003514  00005268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fe5  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015d7  00000000  00000000  0000d06a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0000e648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000628  00000000  00000000  0000ee50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fd9  00000000  00000000  0000f478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f5f  00000000  00000000  00026451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083b8e  00000000  00000000  000303b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3f3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002678  00000000  00000000  000b3f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000b65fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	080033d8 	.word	0x080033d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	080033d8 	.word	0x080033d8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <getID>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
	void getID(uint8_t * txbuffer){
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
		uint8_t ch;
		HAL_UART_Receive(&huart1,&ch ,1, 1);
 8000954:	f107 010d 	add.w	r1, r7, #13
 8000958:	2301      	movs	r3, #1
 800095a:	2201      	movs	r2, #1
 800095c:	4810      	ldr	r0, [pc, #64]	@ (80009a0 <getID+0x54>)
 800095e:	f001 fe97 	bl	8002690 <HAL_UART_Receive>
		if ((ch-'0') <1 || (ch-'0') >5) ch = '0'; //default case id
 8000962:	7b7b      	ldrb	r3, [r7, #13]
 8000964:	2b30      	cmp	r3, #48	@ 0x30
 8000966:	d902      	bls.n	800096e <getID+0x22>
 8000968:	7b7b      	ldrb	r3, [r7, #13]
 800096a:	2b35      	cmp	r3, #53	@ 0x35
 800096c:	d901      	bls.n	8000972 <getID+0x26>
 800096e:	2330      	movs	r3, #48	@ 0x30
 8000970:	737b      	strb	r3, [r7, #13]
		uint16_t case_id = (0x1000|(uint8_t)(ch - '0'));
 8000972:	7b7b      	ldrb	r3, [r7, #13]
 8000974:	3b30      	subs	r3, #48	@ 0x30
 8000976:	b2db      	uxtb	r3, r3
 8000978:	b21b      	sxth	r3, r3
 800097a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800097e:	b21b      	sxth	r3, r3
 8000980:	81fb      	strh	r3, [r7, #14]
		txbuffer[0] = (uint8_t)(case_id >> 8);
 8000982:	89fb      	ldrh	r3, [r7, #14]
 8000984:	0a1b      	lsrs	r3, r3, #8
 8000986:	b29b      	uxth	r3, r3
 8000988:	b2da      	uxtb	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	701a      	strb	r2, [r3, #0]
		txbuffer[1] = (uint8_t)(case_id & 0x00FF);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3301      	adds	r3, #1
 8000992:	89fa      	ldrh	r2, [r7, #14]
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	701a      	strb	r2, [r3, #0]
	}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	200000d0 	.word	0x200000d0
 80009a4:	00000000 	.word	0x00000000

080009a8 <displayData>:

	void displayData(uint8_t* rxbuffer){
 80009a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009ac:	b0a8      	sub	sp, #160	@ 0xa0
 80009ae:	af06      	add	r7, sp, #24
 80009b0:	6078      	str	r0, [r7, #4]
		uint16_t caseID = ((uint16_t)rxbuffer[0] << 8) | (rxbuffer[1]); //first 16 bits for case id
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b21b      	sxth	r3, r3
 80009b8:	021b      	lsls	r3, r3, #8
 80009ba:	b21a      	sxth	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3301      	adds	r3, #1
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b21b      	sxth	r3, r3
 80009c4:	4313      	orrs	r3, r2
 80009c6:	b21b      	sxth	r3, r3
 80009c8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		if ((uint8_t)caseID == 0 || (uint8_t)(caseID>>8) != 0x10) return;
 80009cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 80d8 	beq.w	8000b88 <displayData+0x1e0>
 80009d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	b29b      	uxth	r3, r3
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2b10      	cmp	r3, #16
 80009e4:	f040 80d0 	bne.w	8000b88 <displayData+0x1e0>
		uint16_t engine_temp = ((uint16_t)rxbuffer[2] << 2 ) | (rxbuffer[3] >> 6); // 10 bits for engine temperature
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3302      	adds	r3, #2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3303      	adds	r3, #3
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	099b      	lsrs	r3, r3, #6
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	b21b      	sxth	r3, r3
 8000a00:	4313      	orrs	r3, r2
 8000a02:	b21b      	sxth	r3, r3
 8000a04:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
		uint16_t throttle_pos  = ((uint16_t)(rxbuffer[3] & 0x3F)<<4) | (rxbuffer[4]>>4); // 10 bits for throttle position
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3303      	adds	r3, #3
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	b21b      	sxth	r3, r3
 8000a10:	011b      	lsls	r3, r3, #4
 8000a12:	b21b      	sxth	r3, r3
 8000a14:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
 8000a18:	b21a      	sxth	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	091b      	lsrs	r3, r3, #4
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	b21b      	sxth	r3, r3
 8000a26:	4313      	orrs	r3, r2
 8000a28:	b21b      	sxth	r3, r3
 8000a2a:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
		uint16_t voltage = ((uint16_t)rxbuffer[5] << 4) | rxbuffer[6]>>4; //12 bits for voltage
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3305      	adds	r3, #5
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	b21b      	sxth	r3, r3
 8000a36:	011b      	lsls	r3, r3, #4
 8000a38:	b21a      	sxth	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3306      	adds	r3, #6
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	091b      	lsrs	r3, r3, #4
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	b21b      	sxth	r3, r3
 8000a46:	4313      	orrs	r3, r2
 8000a48:	b21b      	sxth	r3, r3
 8000a4a:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
		uint16_t wheel_speed = ((uint16_t)(rxbuffer[6]& 0x0F) << 8) | (rxbuffer[7]);//12 bits for wheel speed
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3306      	adds	r3, #6
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	021b      	lsls	r3, r3, #8
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000a5e:	b21a      	sxth	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3307      	adds	r3, #7
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		char full_msg[100];

		int voltage_decimal = (voltage * 80/4095) % 10 +1;
 8000a70:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 8000a74:	4613      	mov	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	011b      	lsls	r3, r3, #4
 8000a7c:	4a4c      	ldr	r2, [pc, #304]	@ (8000bb0 <displayData+0x208>)
 8000a7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a82:	441a      	add	r2, r3
 8000a84:	12d2      	asrs	r2, r2, #11
 8000a86:	17db      	asrs	r3, r3, #31
 8000a88:	1ad1      	subs	r1, r2, r3
 8000a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8000bb4 <displayData+0x20c>)
 8000a8c:	fb83 2301 	smull	r2, r3, r3, r1
 8000a90:	109a      	asrs	r2, r3, #2
 8000a92:	17cb      	asrs	r3, r1, #31
 8000a94:	1ad2      	subs	r2, r2, r3
 8000a96:	4613      	mov	r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	4413      	add	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	1aca      	subs	r2, r1, r3
 8000aa0:	1c53      	adds	r3, r2, #1
 8000aa2:	67bb      	str	r3, [r7, #120]	@ 0x78
		int scaled_throttle = throttle_pos*100/1023 + 1;
 8000aa4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8000aa8:	2264      	movs	r2, #100	@ 0x64
 8000aaa:	fb02 f303 	mul.w	r3, r2, r3
 8000aae:	4a42      	ldr	r2, [pc, #264]	@ (8000bb8 <displayData+0x210>)
 8000ab0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ab4:	441a      	add	r2, r3
 8000ab6:	1252      	asrs	r2, r2, #9
 8000ab8:	17db      	asrs	r3, r3, #31
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	3301      	adds	r3, #1
 8000abe:	677b      	str	r3, [r7, #116]	@ 0x74
		int scaled_engine_temp = engine_temp*150/1023 + 1 ;
 8000ac0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8000ac4:	2296      	movs	r2, #150	@ 0x96
 8000ac6:	fb02 f303 	mul.w	r3, r2, r3
 8000aca:	4a3b      	ldr	r2, [pc, #236]	@ (8000bb8 <displayData+0x210>)
 8000acc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ad0:	441a      	add	r2, r3
 8000ad2:	1252      	asrs	r2, r2, #9
 8000ad4:	17db      	asrs	r3, r3, #31
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	3301      	adds	r3, #1
 8000ada:	673b      	str	r3, [r7, #112]	@ 0x70

		snprintf(full_msg,sizeof(full_msg) ,"Case ID: 0x%04X\r\nEngine Temp: %d C\r\nThrottle: %d %%\r\nVoltage: %d.%d V\r\nSpeed: %d km/h\r\n",
 8000adc:	f8b7 8086 	ldrh.w	r8, [r7, #134]	@ 0x86
 8000ae0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ae2:	4a36      	ldr	r2, [pc, #216]	@ (8000bbc <displayData+0x214>)
 8000ae4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae8:	17db      	asrs	r3, r3, #31
 8000aea:	1ad4      	subs	r4, r2, r3
 8000aec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000aee:	4a33      	ldr	r2, [pc, #204]	@ (8000bbc <displayData+0x214>)
 8000af0:	fb82 1203 	smull	r1, r2, r2, r3
 8000af4:	17db      	asrs	r3, r3, #31
 8000af6:	1ad5      	subs	r5, r2, r3
		          caseID, scaled_engine_temp/3, scaled_throttle/3, voltage * 8/4095,voltage_decimal, (int)(wheel_speed*300.0/4095+0.9));
 8000af8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8000afc:	00db      	lsls	r3, r3, #3
		snprintf(full_msg,sizeof(full_msg) ,"Case ID: 0x%04X\r\nEngine Temp: %d C\r\nThrottle: %d %%\r\nVoltage: %d.%d V\r\nSpeed: %d km/h\r\n",
 8000afe:	4a2c      	ldr	r2, [pc, #176]	@ (8000bb0 <displayData+0x208>)
 8000b00:	fb82 1203 	smull	r1, r2, r2, r3
 8000b04:	441a      	add	r2, r3
 8000b06:	12d2      	asrs	r2, r2, #11
 8000b08:	17db      	asrs	r3, r3, #31
 8000b0a:	1ad6      	subs	r6, r2, r3
		          caseID, scaled_engine_temp/3, scaled_throttle/3, voltage * 8/4095,voltage_decimal, (int)(wheel_speed*300.0/4095+0.9));
 8000b0c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fc77 	bl	8000404 <__aeabi_i2d>
 8000b16:	a320      	add	r3, pc, #128	@ (adr r3, 8000b98 <displayData+0x1f0>)
 8000b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b1c:	f7ff fcdc 	bl	80004d8 <__aeabi_dmul>
 8000b20:	4602      	mov	r2, r0
 8000b22:	460b      	mov	r3, r1
 8000b24:	4610      	mov	r0, r2
 8000b26:	4619      	mov	r1, r3
 8000b28:	a31d      	add	r3, pc, #116	@ (adr r3, 8000ba0 <displayData+0x1f8>)
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	f7ff fdfd 	bl	800072c <__aeabi_ddiv>
 8000b32:	4602      	mov	r2, r0
 8000b34:	460b      	mov	r3, r1
 8000b36:	4610      	mov	r0, r2
 8000b38:	4619      	mov	r1, r3
 8000b3a:	a31b      	add	r3, pc, #108	@ (adr r3, 8000ba8 <displayData+0x200>)
 8000b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b40:	f7ff fb14 	bl	800016c <__adddf3>
 8000b44:	4602      	mov	r2, r0
 8000b46:	460b      	mov	r3, r1
		snprintf(full_msg,sizeof(full_msg) ,"Case ID: 0x%04X\r\nEngine Temp: %d C\r\nThrottle: %d %%\r\nVoltage: %d.%d V\r\nSpeed: %d km/h\r\n",
 8000b48:	4610      	mov	r0, r2
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f7ff fed6 	bl	80008fc <__aeabi_d2iz>
 8000b50:	4603      	mov	r3, r0
 8000b52:	f107 000c 	add.w	r0, r7, #12
 8000b56:	9304      	str	r3, [sp, #16]
 8000b58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000b5a:	9303      	str	r3, [sp, #12]
 8000b5c:	9602      	str	r6, [sp, #8]
 8000b5e:	9501      	str	r5, [sp, #4]
 8000b60:	9400      	str	r4, [sp, #0]
 8000b62:	4643      	mov	r3, r8
 8000b64:	4a16      	ldr	r2, [pc, #88]	@ (8000bc0 <displayData+0x218>)
 8000b66:	2164      	movs	r1, #100	@ 0x64
 8000b68:	f001 ff72 	bl	8002a50 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)full_msg, strlen(full_msg), 100);
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff faed 	bl	8000150 <strlen>
 8000b76:	4603      	mov	r3, r0
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	f107 010c 	add.w	r1, r7, #12
 8000b7e:	2364      	movs	r3, #100	@ 0x64
 8000b80:	4810      	ldr	r0, [pc, #64]	@ (8000bc4 <displayData+0x21c>)
 8000b82:	f001 fcfa 	bl	800257a <HAL_UART_Transmit>
 8000b86:	e000      	b.n	8000b8a <displayData+0x1e2>
		if ((uint8_t)caseID == 0 || (uint8_t)(caseID>>8) != 0x10) return;
 8000b88:	bf00      	nop
	}
 8000b8a:	3788      	adds	r7, #136	@ 0x88
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b92:	bf00      	nop
 8000b94:	f3af 8000 	nop.w
 8000b98:	00000000 	.word	0x00000000
 8000b9c:	4072c000 	.word	0x4072c000
 8000ba0:	00000000 	.word	0x00000000
 8000ba4:	40affe00 	.word	0x40affe00
 8000ba8:	cccccccd 	.word	0xcccccccd
 8000bac:	3feccccc 	.word	0x3feccccc
 8000bb0:	80080081 	.word	0x80080081
 8000bb4:	66666667 	.word	0x66666667
 8000bb8:	80200803 	.word	0x80200803
 8000bbc:	55555556 	.word	0x55555556
 8000bc0:	080033f0 	.word	0x080033f0
 8000bc4:	200000d0 	.word	0x200000d0

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bce:	f000 fa87 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd2:	f000 f84f 	bl	8000c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd6:	f000 f8e9 	bl	8000dac <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bda:	f000 f887 	bl	8000cec <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000bde:	f000 f8bb 	bl	8000d58 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2101      	movs	r1, #1
 8000be6:	4821      	ldr	r0, [pc, #132]	@ (8000c6c <main+0xa4>)
 8000be8:	f000 fd68 	bl	80016bc <HAL_GPIO_WritePin>
  HAL_SPI_Init(&hspi1);
 8000bec:	4820      	ldr	r0, [pc, #128]	@ (8000c70 <main+0xa8>)
 8000bee:	f001 f98d 	bl	8001f0c <HAL_SPI_Init>

  uint8_t rxbuffer[8] = {0}; // to receive sensor data
 8000bf2:	f107 030c 	add.w	r3, r7, #12
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
  /*
   rx[0,1] = caseid
   rx[2,3,4] = temp + throttle
   rx[5,6,7] = voltage + speed
   */
  uint8_t txbuffer[8] = {0}; //to send number
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //for getting case id and forwarding to slave and receiving reply
	  getID(txbuffer);
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fea0 	bl	800094c <getID>

	  for (int i=0; i<3;i++){
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	e020      	b.n	8000c54 <main+0x8c>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //for chip select
 8000c12:	2200      	movs	r2, #0
 8000c14:	2101      	movs	r1, #1
 8000c16:	4815      	ldr	r0, [pc, #84]	@ (8000c6c <main+0xa4>)
 8000c18:	f000 fd50 	bl	80016bc <HAL_GPIO_WritePin>
		  HAL_Delay(10);
 8000c1c:	200a      	movs	r0, #10
 8000c1e:	f000 fac1 	bl	80011a4 <HAL_Delay>
		  HAL_SPI_TransmitReceive(&hspi1, txbuffer, rxbuffer, 8, HAL_MAX_DELAY);
 8000c22:	f107 020c 	add.w	r2, r7, #12
 8000c26:	1d39      	adds	r1, r7, #4
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2308      	movs	r3, #8
 8000c30:	480f      	ldr	r0, [pc, #60]	@ (8000c70 <main+0xa8>)
 8000c32:	f001 f9ef 	bl	8002014 <HAL_SPI_TransmitReceive>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	2101      	movs	r1, #1
 8000c3a:	480c      	ldr	r0, [pc, #48]	@ (8000c6c <main+0xa4>)
 8000c3c:	f000 fd3e 	bl	80016bc <HAL_GPIO_WritePin>
		  if (i==0) {
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d103      	bne.n	8000c4e <main+0x86>
			  txbuffer[0]=0x10;
 8000c46:	2310      	movs	r3, #16
 8000c48:	713b      	strb	r3, [r7, #4]
			  txbuffer[1] = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	717b      	strb	r3, [r7, #5]
	  for (int i=0; i<3;i++){
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	dddb      	ble.n	8000c12 <main+0x4a>
		  }
	  }
	  displayData(rxbuffer);
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fea2 	bl	80009a8 <displayData>
	  HAL_Delay(200);
 8000c64:	20c8      	movs	r0, #200	@ 0xc8
 8000c66:	f000 fa9d 	bl	80011a4 <HAL_Delay>
	  getID(txbuffer);
 8000c6a:	e7cb      	b.n	8000c04 <main+0x3c>
 8000c6c:	40010c00 	.word	0x40010c00
 8000c70:	20000078 	.word	0x20000078

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b090      	sub	sp, #64	@ 0x40
 8000c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	f107 0318 	add.w	r3, r7, #24
 8000c7e:	2228      	movs	r2, #40	@ 0x28
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f001 ff1a 	bl	8002abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c96:	2302      	movs	r3, #2
 8000c98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c9e:	2310      	movs	r3, #16
 8000ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca6:	f107 0318 	add.w	r3, r7, #24
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fd1e 	bl	80016ec <HAL_RCC_OscConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cb6:	f000 f8b7 	bl	8000e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cba:	230f      	movs	r3, #15
 8000cbc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 ff8c 	bl	8001bf0 <HAL_RCC_ClockConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cde:	f000 f8a3 	bl	8000e28 <Error_Handler>
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3740      	adds	r7, #64	@ 0x40
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cf0:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <MX_SPI1_Init+0x64>)
 8000cf2:	4a18      	ldr	r2, [pc, #96]	@ (8000d54 <MX_SPI1_Init+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cf6:	4b16      	ldr	r3, [pc, #88]	@ (8000d50 <MX_SPI1_Init+0x64>)
 8000cf8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <MX_SPI1_Init+0x64>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <MX_SPI1_Init+0x64>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <MX_SPI1_Init+0x64>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <MX_SPI1_Init+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <MX_SPI1_Init+0x64>)
 8000d18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <MX_SPI1_Init+0x64>)
 8000d20:	2228      	movs	r2, #40	@ 0x28
 8000d22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <MX_SPI1_Init+0x64>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d2a:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <MX_SPI1_Init+0x64>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <MX_SPI1_Init+0x64>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <MX_SPI1_Init+0x64>)
 8000d38:	220a      	movs	r2, #10
 8000d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d3c:	4804      	ldr	r0, [pc, #16]	@ (8000d50 <MX_SPI1_Init+0x64>)
 8000d3e:	f001 f8e5 	bl	8001f0c <HAL_SPI_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d48:	f000 f86e 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000078 	.word	0x20000078
 8000d54:	40013000 	.word	0x40013000

08000d58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <MX_USART1_UART_Init+0x4c>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	@ (8000da8 <MX_USART1_UART_Init+0x50>)
 8000d60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d62:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <MX_USART1_UART_Init+0x4c>)
 8000d64:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <MX_USART1_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <MX_USART1_UART_Init+0x4c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <MX_USART1_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <MX_USART1_UART_Init+0x4c>)
 8000d7e:	220c      	movs	r2, #12
 8000d80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d82:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <MX_USART1_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <MX_USART1_UART_Init+0x4c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d8e:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <MX_USART1_UART_Init+0x4c>)
 8000d90:	f001 fba3 	bl	80024da <HAL_UART_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d9a:	f000 f845 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200000d0 	.word	0x200000d0
 8000da8:	40013800 	.word	0x40013800

08000dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db2:	f107 0308 	add.w	r3, r7, #8
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <MX_GPIO_Init+0x74>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a16      	ldr	r2, [pc, #88]	@ (8000e20 <MX_GPIO_Init+0x74>)
 8000dc6:	f043 0304 	orr.w	r3, r3, #4
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <MX_GPIO_Init+0x74>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd8:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <MX_GPIO_Init+0x74>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a10      	ldr	r2, [pc, #64]	@ (8000e20 <MX_GPIO_Init+0x74>)
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <MX_GPIO_Init+0x74>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0308 	and.w	r3, r3, #8
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2101      	movs	r1, #1
 8000df4:	480b      	ldr	r0, [pc, #44]	@ (8000e24 <MX_GPIO_Init+0x78>)
 8000df6:	f000 fc61 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2302      	movs	r3, #2
 8000e08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4804      	ldr	r0, [pc, #16]	@ (8000e24 <MX_GPIO_Init+0x78>)
 8000e12:	f000 facf 	bl	80013b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40010c00 	.word	0x40010c00

08000e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
}
 8000e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <Error_Handler+0x8>

08000e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <HAL_MspInit+0x5c>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	4a14      	ldr	r2, [pc, #80]	@ (8000e90 <HAL_MspInit+0x5c>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6193      	str	r3, [r2, #24]
 8000e46:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <HAL_MspInit+0x5c>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e52:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <HAL_MspInit+0x5c>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	4a0e      	ldr	r2, [pc, #56]	@ (8000e90 <HAL_MspInit+0x5c>)
 8000e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e5c:	61d3      	str	r3, [r2, #28]
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <HAL_MspInit+0x5c>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <HAL_MspInit+0x60>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	4a04      	ldr	r2, [pc, #16]	@ (8000e94 <HAL_MspInit+0x60>)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40010000 	.word	0x40010000

08000e98 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8000f20 <HAL_SPI_MspInit+0x88>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d12f      	bne.n	8000f18 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <HAL_SPI_MspInit+0x8c>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a19      	ldr	r2, [pc, #100]	@ (8000f24 <HAL_SPI_MspInit+0x8c>)
 8000ebe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <HAL_SPI_MspInit+0x8c>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <HAL_SPI_MspInit+0x8c>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a13      	ldr	r2, [pc, #76]	@ (8000f24 <HAL_SPI_MspInit+0x8c>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <HAL_SPI_MspInit+0x8c>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ee8:	23a0      	movs	r3, #160	@ 0xa0
 8000eea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480b      	ldr	r0, [pc, #44]	@ (8000f28 <HAL_SPI_MspInit+0x90>)
 8000efc:	f000 fa5a 	bl	80013b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f00:	2340      	movs	r3, #64	@ 0x40
 8000f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	4619      	mov	r1, r3
 8000f12:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <HAL_SPI_MspInit+0x90>)
 8000f14:	f000 fa4e 	bl	80013b4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000f18:	bf00      	nop
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40013000 	.word	0x40013000
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40010800 	.word	0x40010800

08000f2c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb8 <HAL_UART_MspInit+0x8c>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d131      	bne.n	8000fb0 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <HAL_UART_MspInit+0x90>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a1a      	ldr	r2, [pc, #104]	@ (8000fbc <HAL_UART_MspInit+0x90>)
 8000f52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <HAL_UART_MspInit+0x90>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <HAL_UART_MspInit+0x90>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a14      	ldr	r2, [pc, #80]	@ (8000fbc <HAL_UART_MspInit+0x90>)
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <HAL_UART_MspInit+0x90>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480b      	ldr	r0, [pc, #44]	@ (8000fc0 <HAL_UART_MspInit+0x94>)
 8000f92:	f000 fa0f 	bl	80013b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <HAL_UART_MspInit+0x94>)
 8000fac:	f000 fa02 	bl	80013b4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000fb0:	bf00      	nop
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40013800 	.word	0x40013800
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010800 	.word	0x40010800

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <NMI_Handler+0x4>

08000fcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001014:	f000 f8aa 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001024:	4a14      	ldr	r2, [pc, #80]	@ (8001078 <_sbrk+0x5c>)
 8001026:	4b15      	ldr	r3, [pc, #84]	@ (800107c <_sbrk+0x60>)
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001030:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <_sbrk+0x64>)
 800103a:	4a12      	ldr	r2, [pc, #72]	@ (8001084 <_sbrk+0x68>)
 800103c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	429a      	cmp	r2, r3
 800104a:	d207      	bcs.n	800105c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800104c:	f001 fd3e 	bl	8002acc <__errno>
 8001050:	4603      	mov	r3, r0
 8001052:	220c      	movs	r2, #12
 8001054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	e009      	b.n	8001070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	4a05      	ldr	r2, [pc, #20]	@ (8001080 <_sbrk+0x64>)
 800106c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20005000 	.word	0x20005000
 800107c:	00000400 	.word	0x00000400
 8001080:	20000118 	.word	0x20000118
 8001084:	20000268 	.word	0x20000268

08001088 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr

08001094 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001094:	f7ff fff8 	bl	8001088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001098:	480b      	ldr	r0, [pc, #44]	@ (80010c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800109a:	490c      	ldr	r1, [pc, #48]	@ (80010cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800109c:	4a0c      	ldr	r2, [pc, #48]	@ (80010d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a09      	ldr	r2, [pc, #36]	@ (80010d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010b0:	4c09      	ldr	r4, [pc, #36]	@ (80010d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010be:	f001 fd0b 	bl	8002ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010c2:	f7ff fd81 	bl	8000bc8 <main>
  bx lr
 80010c6:	4770      	bx	lr
  ldr r0, =_sdata
 80010c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010cc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010d0:	080034b8 	.word	0x080034b8
  ldr r2, =_sbss
 80010d4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010d8:	20000268 	.word	0x20000268

080010dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC1_2_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <HAL_Init+0x28>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	@ (8001108 <HAL_Init+0x28>)
 80010ea:	f043 0310 	orr.w	r3, r3, #16
 80010ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f92b 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	200f      	movs	r0, #15
 80010f8:	f000 f808 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fe9a 	bl	8000e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40022000 	.word	0x40022000

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f935 	bl	800139a <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f90b 	bl	8001362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	@ (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000000 	.word	0x20000000
 8001164:	20000008 	.word	0x20000008
 8001168:	20000004 	.word	0x20000004

0800116c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <HAL_IncTick+0x1c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b05      	ldr	r3, [pc, #20]	@ (800118c <HAL_IncTick+0x20>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a03      	ldr	r2, [pc, #12]	@ (800118c <HAL_IncTick+0x20>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	20000008 	.word	0x20000008
 800118c:	2000011c 	.word	0x2000011c

08001190 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b02      	ldr	r3, [pc, #8]	@ (80011a0 <HAL_GetTick+0x10>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	2000011c 	.word	0x2000011c

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff fff0 	bl	8001190 <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011bc:	d005      	beq.n	80011ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011be:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <HAL_Delay+0x44>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ca:	bf00      	nop
 80011cc:	f7ff ffe0 	bl	8001190 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d8f7      	bhi.n	80011cc <HAL_Delay+0x28>
  {
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008

080011ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001208:	4013      	ands	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001214:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	@ (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001238:	4b04      	ldr	r3, [pc, #16]	@ (800124c <__NVIC_GetPriorityGrouping+0x18>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0307 	and.w	r3, r3, #7
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	@ (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	@ (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	@ 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	@ 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff90 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff49 	bl	80011ec <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff5e 	bl	8001234 <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff90 	bl	80012a4 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5f 	bl	8001250 <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffb0 	bl	8001308 <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b08b      	sub	sp, #44	@ 0x2c
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c6:	e169      	b.n	800169c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013c8:	2201      	movs	r2, #1
 80013ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	f040 8158 	bne.w	8001696 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4a9a      	ldr	r2, [pc, #616]	@ (8001654 <HAL_GPIO_Init+0x2a0>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d05e      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 80013f0:	4a98      	ldr	r2, [pc, #608]	@ (8001654 <HAL_GPIO_Init+0x2a0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d875      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 80013f6:	4a98      	ldr	r2, [pc, #608]	@ (8001658 <HAL_GPIO_Init+0x2a4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d058      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 80013fc:	4a96      	ldr	r2, [pc, #600]	@ (8001658 <HAL_GPIO_Init+0x2a4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d86f      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 8001402:	4a96      	ldr	r2, [pc, #600]	@ (800165c <HAL_GPIO_Init+0x2a8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d052      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 8001408:	4a94      	ldr	r2, [pc, #592]	@ (800165c <HAL_GPIO_Init+0x2a8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d869      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 800140e:	4a94      	ldr	r2, [pc, #592]	@ (8001660 <HAL_GPIO_Init+0x2ac>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d04c      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 8001414:	4a92      	ldr	r2, [pc, #584]	@ (8001660 <HAL_GPIO_Init+0x2ac>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d863      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 800141a:	4a92      	ldr	r2, [pc, #584]	@ (8001664 <HAL_GPIO_Init+0x2b0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d046      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 8001420:	4a90      	ldr	r2, [pc, #576]	@ (8001664 <HAL_GPIO_Init+0x2b0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d85d      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 8001426:	2b12      	cmp	r3, #18
 8001428:	d82a      	bhi.n	8001480 <HAL_GPIO_Init+0xcc>
 800142a:	2b12      	cmp	r3, #18
 800142c:	d859      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 800142e:	a201      	add	r2, pc, #4	@ (adr r2, 8001434 <HAL_GPIO_Init+0x80>)
 8001430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001434:	080014af 	.word	0x080014af
 8001438:	08001489 	.word	0x08001489
 800143c:	0800149b 	.word	0x0800149b
 8001440:	080014dd 	.word	0x080014dd
 8001444:	080014e3 	.word	0x080014e3
 8001448:	080014e3 	.word	0x080014e3
 800144c:	080014e3 	.word	0x080014e3
 8001450:	080014e3 	.word	0x080014e3
 8001454:	080014e3 	.word	0x080014e3
 8001458:	080014e3 	.word	0x080014e3
 800145c:	080014e3 	.word	0x080014e3
 8001460:	080014e3 	.word	0x080014e3
 8001464:	080014e3 	.word	0x080014e3
 8001468:	080014e3 	.word	0x080014e3
 800146c:	080014e3 	.word	0x080014e3
 8001470:	080014e3 	.word	0x080014e3
 8001474:	080014e3 	.word	0x080014e3
 8001478:	08001491 	.word	0x08001491
 800147c:	080014a5 	.word	0x080014a5
 8001480:	4a79      	ldr	r2, [pc, #484]	@ (8001668 <HAL_GPIO_Init+0x2b4>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d013      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001486:	e02c      	b.n	80014e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	623b      	str	r3, [r7, #32]
          break;
 800148e:	e029      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	3304      	adds	r3, #4
 8001496:	623b      	str	r3, [r7, #32]
          break;
 8001498:	e024      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	3308      	adds	r3, #8
 80014a0:	623b      	str	r3, [r7, #32]
          break;
 80014a2:	e01f      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	330c      	adds	r3, #12
 80014aa:	623b      	str	r3, [r7, #32]
          break;
 80014ac:	e01a      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014b6:	2304      	movs	r3, #4
 80014b8:	623b      	str	r3, [r7, #32]
          break;
 80014ba:	e013      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d105      	bne.n	80014d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c4:	2308      	movs	r3, #8
 80014c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	611a      	str	r2, [r3, #16]
          break;
 80014ce:	e009      	b.n	80014e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d0:	2308      	movs	r3, #8
 80014d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	615a      	str	r2, [r3, #20]
          break;
 80014da:	e003      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
          break;
 80014e0:	e000      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          break;
 80014e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2bff      	cmp	r3, #255	@ 0xff
 80014e8:	d801      	bhi.n	80014ee <HAL_GPIO_Init+0x13a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	e001      	b.n	80014f2 <HAL_GPIO_Init+0x13e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3304      	adds	r3, #4
 80014f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2bff      	cmp	r3, #255	@ 0xff
 80014f8:	d802      	bhi.n	8001500 <HAL_GPIO_Init+0x14c>
 80014fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	e002      	b.n	8001506 <HAL_GPIO_Init+0x152>
 8001500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001502:	3b08      	subs	r3, #8
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	210f      	movs	r1, #15
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	401a      	ands	r2, r3
 8001518:	6a39      	ldr	r1, [r7, #32]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	431a      	orrs	r2, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80b1 	beq.w	8001696 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001534:	4b4d      	ldr	r3, [pc, #308]	@ (800166c <HAL_GPIO_Init+0x2b8>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a4c      	ldr	r2, [pc, #304]	@ (800166c <HAL_GPIO_Init+0x2b8>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b4a      	ldr	r3, [pc, #296]	@ (800166c <HAL_GPIO_Init+0x2b8>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800154c:	4a48      	ldr	r2, [pc, #288]	@ (8001670 <HAL_GPIO_Init+0x2bc>)
 800154e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3302      	adds	r3, #2
 8001554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001558:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	220f      	movs	r2, #15
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	4013      	ands	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a40      	ldr	r2, [pc, #256]	@ (8001674 <HAL_GPIO_Init+0x2c0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d013      	beq.n	80015a0 <HAL_GPIO_Init+0x1ec>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a3f      	ldr	r2, [pc, #252]	@ (8001678 <HAL_GPIO_Init+0x2c4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d00d      	beq.n	800159c <HAL_GPIO_Init+0x1e8>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a3e      	ldr	r2, [pc, #248]	@ (800167c <HAL_GPIO_Init+0x2c8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d007      	beq.n	8001598 <HAL_GPIO_Init+0x1e4>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a3d      	ldr	r2, [pc, #244]	@ (8001680 <HAL_GPIO_Init+0x2cc>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d101      	bne.n	8001594 <HAL_GPIO_Init+0x1e0>
 8001590:	2303      	movs	r3, #3
 8001592:	e006      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 8001594:	2304      	movs	r3, #4
 8001596:	e004      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 8001598:	2302      	movs	r3, #2
 800159a:	e002      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 80015a0:	2300      	movs	r3, #0
 80015a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015a4:	f002 0203 	and.w	r2, r2, #3
 80015a8:	0092      	lsls	r2, r2, #2
 80015aa:	4093      	lsls	r3, r2
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015b2:	492f      	ldr	r1, [pc, #188]	@ (8001670 <HAL_GPIO_Init+0x2bc>)
 80015b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	3302      	adds	r3, #2
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d006      	beq.n	80015da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	492c      	ldr	r1, [pc, #176]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	608b      	str	r3, [r1, #8]
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015da:	4b2a      	ldr	r3, [pc, #168]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	4928      	ldr	r1, [pc, #160]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015f4:	4b23      	ldr	r3, [pc, #140]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	4922      	ldr	r1, [pc, #136]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	60cb      	str	r3, [r1, #12]
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001602:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	43db      	mvns	r3, r3
 800160a:	491e      	ldr	r1, [pc, #120]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 800160c:	4013      	ands	r3, r2
 800160e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800161c:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	4918      	ldr	r1, [pc, #96]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800162a:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	43db      	mvns	r3, r3
 8001632:	4914      	ldr	r1, [pc, #80]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 8001634:	4013      	ands	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d021      	beq.n	8001688 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001644:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	490e      	ldr	r1, [pc, #56]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
 8001650:	e021      	b.n	8001696 <HAL_GPIO_Init+0x2e2>
 8001652:	bf00      	nop
 8001654:	10320000 	.word	0x10320000
 8001658:	10310000 	.word	0x10310000
 800165c:	10220000 	.word	0x10220000
 8001660:	10210000 	.word	0x10210000
 8001664:	10120000 	.word	0x10120000
 8001668:	10110000 	.word	0x10110000
 800166c:	40021000 	.word	0x40021000
 8001670:	40010000 	.word	0x40010000
 8001674:	40010800 	.word	0x40010800
 8001678:	40010c00 	.word	0x40010c00
 800167c:	40011000 	.word	0x40011000
 8001680:	40011400 	.word	0x40011400
 8001684:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001688:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <HAL_GPIO_Init+0x304>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	43db      	mvns	r3, r3
 8001690:	4909      	ldr	r1, [pc, #36]	@ (80016b8 <HAL_GPIO_Init+0x304>)
 8001692:	4013      	ands	r3, r2
 8001694:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	3301      	adds	r3, #1
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a2:	fa22 f303 	lsr.w	r3, r2, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f47f ae8e 	bne.w	80013c8 <HAL_GPIO_Init+0x14>
  }
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	372c      	adds	r7, #44	@ 0x2c
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	40010400 	.word	0x40010400

080016bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016cc:	787b      	ldrb	r3, [r7, #1]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016d8:	e003      	b.n	80016e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	041a      	lsls	r2, r3, #16
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	611a      	str	r2, [r3, #16]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e272      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8087 	beq.w	800181a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800170c:	4b92      	ldr	r3, [pc, #584]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b04      	cmp	r3, #4
 8001716:	d00c      	beq.n	8001732 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001718:	4b8f      	ldr	r3, [pc, #572]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b08      	cmp	r3, #8
 8001722:	d112      	bne.n	800174a <HAL_RCC_OscConfig+0x5e>
 8001724:	4b8c      	ldr	r3, [pc, #560]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800172c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001730:	d10b      	bne.n	800174a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001732:	4b89      	ldr	r3, [pc, #548]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d06c      	beq.n	8001818 <HAL_RCC_OscConfig+0x12c>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d168      	bne.n	8001818 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e24c      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x76>
 8001754:	4b80      	ldr	r3, [pc, #512]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a7f      	ldr	r2, [pc, #508]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800175a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	e02e      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x98>
 800176a:	4b7b      	ldr	r3, [pc, #492]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a7a      	ldr	r2, [pc, #488]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001770:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4b78      	ldr	r3, [pc, #480]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a77      	ldr	r2, [pc, #476]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800177c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e01d      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0xbc>
 800178e:	4b72      	ldr	r3, [pc, #456]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a71      	ldr	r2, [pc, #452]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001794:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b6f      	ldr	r3, [pc, #444]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a6e      	ldr	r2, [pc, #440]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 80017a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a6a      	ldr	r2, [pc, #424]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b68      	ldr	r3, [pc, #416]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a67      	ldr	r2, [pc, #412]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d013      	beq.n	80017f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fce2 	bl	8001190 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff fcde 	bl	8001190 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	@ 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e200      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0xe4>
 80017ee:	e014      	b.n	800181a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fcce 	bl	8001190 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fcca 	bl	8001190 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	@ 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e1ec      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	4b53      	ldr	r3, [pc, #332]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x10c>
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d063      	beq.n	80018ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001826:	4b4c      	ldr	r3, [pc, #304]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001832:	4b49      	ldr	r3, [pc, #292]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b08      	cmp	r3, #8
 800183c:	d11c      	bne.n	8001878 <HAL_RCC_OscConfig+0x18c>
 800183e:	4b46      	ldr	r3, [pc, #280]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d116      	bne.n	8001878 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184a:	4b43      	ldr	r3, [pc, #268]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_RCC_OscConfig+0x176>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d001      	beq.n	8001862 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e1c0      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001862:	4b3d      	ldr	r3, [pc, #244]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4939      	ldr	r1, [pc, #228]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	e03a      	b.n	80018ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d020      	beq.n	80018c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001880:	4b36      	ldr	r3, [pc, #216]	@ (800195c <HAL_RCC_OscConfig+0x270>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff fc83 	bl	8001190 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188e:	f7ff fc7f 	bl	8001190 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e1a1      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4927      	ldr	r1, [pc, #156]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
 80018c0:	e015      	b.n	80018ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c2:	4b26      	ldr	r3, [pc, #152]	@ (800195c <HAL_RCC_OscConfig+0x270>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fc62 	bl	8001190 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d0:	f7ff fc5e 	bl	8001190 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e180      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d03a      	beq.n	8001970 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d019      	beq.n	8001936 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001902:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff fc42 	bl	8001190 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001910:	f7ff fc3e 	bl	8001190 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e160      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	4b0d      	ldr	r3, [pc, #52]	@ (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800192e:	2001      	movs	r0, #1
 8001930:	f000 face 	bl	8001ed0 <RCC_Delay>
 8001934:	e01c      	b.n	8001970 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001936:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193c:	f7ff fc28 	bl	8001190 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001942:	e00f      	b.n	8001964 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fc24 	bl	8001190 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d908      	bls.n	8001964 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e146      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	42420000 	.word	0x42420000
 8001960:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001964:	4b92      	ldr	r3, [pc, #584]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e9      	bne.n	8001944 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80a6 	beq.w	8001aca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001982:	4b8b      	ldr	r3, [pc, #556]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10d      	bne.n	80019aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b88      	ldr	r3, [pc, #544]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a87      	ldr	r2, [pc, #540]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001998:	61d3      	str	r3, [r2, #28]
 800199a:	4b85      	ldr	r3, [pc, #532]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a6:	2301      	movs	r3, #1
 80019a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019aa:	4b82      	ldr	r3, [pc, #520]	@ (8001bb4 <HAL_RCC_OscConfig+0x4c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d118      	bne.n	80019e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b6:	4b7f      	ldr	r3, [pc, #508]	@ (8001bb4 <HAL_RCC_OscConfig+0x4c8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a7e      	ldr	r2, [pc, #504]	@ (8001bb4 <HAL_RCC_OscConfig+0x4c8>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c2:	f7ff fbe5 	bl	8001190 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ca:	f7ff fbe1 	bl	8001190 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b64      	cmp	r3, #100	@ 0x64
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e103      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	4b75      	ldr	r3, [pc, #468]	@ (8001bb4 <HAL_RCC_OscConfig+0x4c8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x312>
 80019f0:	4b6f      	ldr	r3, [pc, #444]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4a6e      	ldr	r2, [pc, #440]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	e02d      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x334>
 8001a06:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4a69      	ldr	r2, [pc, #420]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	6213      	str	r3, [r2, #32]
 8001a12:	4b67      	ldr	r3, [pc, #412]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a66      	ldr	r2, [pc, #408]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	f023 0304 	bic.w	r3, r3, #4
 8001a1c:	6213      	str	r3, [r2, #32]
 8001a1e:	e01c      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d10c      	bne.n	8001a42 <HAL_RCC_OscConfig+0x356>
 8001a28:	4b61      	ldr	r3, [pc, #388]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4a60      	ldr	r2, [pc, #384]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	6213      	str	r3, [r2, #32]
 8001a34:	4b5e      	ldr	r3, [pc, #376]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4a5d      	ldr	r2, [pc, #372]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6213      	str	r3, [r2, #32]
 8001a40:	e00b      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 8001a42:	4b5b      	ldr	r3, [pc, #364]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4a5a      	ldr	r2, [pc, #360]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	6213      	str	r3, [r2, #32]
 8001a4e:	4b58      	ldr	r3, [pc, #352]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4a57      	ldr	r2, [pc, #348]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d015      	beq.n	8001a8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7ff fb95 	bl	8001190 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff fb91 	bl	8001190 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e0b1      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a80:	4b4b      	ldr	r3, [pc, #300]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ee      	beq.n	8001a6a <HAL_RCC_OscConfig+0x37e>
 8001a8c:	e014      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fb7f 	bl	8001190 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7ff fb7b 	bl	8001190 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e09b      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aac:	4b40      	ldr	r3, [pc, #256]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ee      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d105      	bne.n	8001aca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abe:	4b3c      	ldr	r3, [pc, #240]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4a3b      	ldr	r2, [pc, #236]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ac8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8087 	beq.w	8001be2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad4:	4b36      	ldr	r3, [pc, #216]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d061      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d146      	bne.n	8001b76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae8:	4b33      	ldr	r3, [pc, #204]	@ (8001bb8 <HAL_RCC_OscConfig+0x4cc>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7ff fb4f 	bl	8001190 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af6:	f7ff fb4b 	bl	8001190 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e06d      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b08:	4b29      	ldr	r3, [pc, #164]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b1c:	d108      	bne.n	8001b30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b1e:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	4921      	ldr	r1, [pc, #132]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b30:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a19      	ldr	r1, [r3, #32]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	430b      	orrs	r3, r1
 8001b42:	491b      	ldr	r1, [pc, #108]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b48:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <HAL_RCC_OscConfig+0x4cc>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fb1f 	bl	8001190 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff fb1b 	bl	8001190 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e03d      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b68:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x46a>
 8001b74:	e035      	b.n	8001be2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <HAL_RCC_OscConfig+0x4cc>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fb08 	bl	8001190 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7ff fb04 	bl	8001190 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e026      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x498>
 8001ba2:	e01e      	b.n	8001be2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d107      	bne.n	8001bbc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e019      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <HAL_RCC_OscConfig+0x500>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d106      	bne.n	8001bde <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000

08001bf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0d0      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c04:	4b6a      	ldr	r3, [pc, #424]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d910      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b67      	ldr	r3, [pc, #412]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 0207 	bic.w	r2, r3, #7
 8001c1a:	4965      	ldr	r1, [pc, #404]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b63      	ldr	r3, [pc, #396]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0b8      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d020      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c4c:	4b59      	ldr	r3, [pc, #356]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4a58      	ldr	r2, [pc, #352]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c64:	4b53      	ldr	r3, [pc, #332]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	4a52      	ldr	r2, [pc, #328]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c70:	4b50      	ldr	r3, [pc, #320]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	494d      	ldr	r1, [pc, #308]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d040      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d107      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	4b47      	ldr	r3, [pc, #284]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d115      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e07f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d107      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cae:	4b41      	ldr	r3, [pc, #260]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d109      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e073      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e06b      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cce:	4b39      	ldr	r3, [pc, #228]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f023 0203 	bic.w	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4936      	ldr	r1, [pc, #216]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce0:	f7ff fa56 	bl	8001190 <HAL_GetTick>
 8001ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce8:	f7ff fa52 	bl	8001190 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e053      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 020c 	and.w	r2, r3, #12
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d1eb      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d10:	4b27      	ldr	r3, [pc, #156]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d210      	bcs.n	8001d40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b24      	ldr	r3, [pc, #144]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 0207 	bic.w	r2, r3, #7
 8001d26:	4922      	ldr	r1, [pc, #136]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b20      	ldr	r3, [pc, #128]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e032      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4916      	ldr	r1, [pc, #88]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d6a:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	490e      	ldr	r1, [pc, #56]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d7e:	f000 f821 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 8001d82:	4602      	mov	r2, r0
 8001d84:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	490a      	ldr	r1, [pc, #40]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d90:	5ccb      	ldrb	r3, [r1, r3]
 8001d92:	fa22 f303 	lsr.w	r3, r2, r3
 8001d96:	4a09      	ldr	r2, [pc, #36]	@ (8001dbc <HAL_RCC_ClockConfig+0x1cc>)
 8001d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d9a:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1d0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff f9b4 	bl	800110c <HAL_InitTick>

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40022000 	.word	0x40022000
 8001db4:	40021000 	.word	0x40021000
 8001db8:	08003448 	.word	0x08003448
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	20000004 	.word	0x20000004

08001dc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dde:	4b1e      	ldr	r3, [pc, #120]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x94>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x30>
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x36>
 8001df2:	e027      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001df4:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001df6:	613b      	str	r3, [r7, #16]
      break;
 8001df8:	e027      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	0c9b      	lsrs	r3, r3, #18
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	4a17      	ldr	r2, [pc, #92]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e04:	5cd3      	ldrb	r3, [r2, r3]
 8001e06:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d010      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e12:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	0c5b      	lsrs	r3, r3, #17
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	4a11      	ldr	r2, [pc, #68]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e1e:	5cd3      	ldrb	r3, [r2, r3]
 8001e20:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a0d      	ldr	r2, [pc, #52]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e26:	fb03 f202 	mul.w	r2, r3, r2
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e004      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a0c      	ldr	r2, [pc, #48]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e38:	fb02 f303 	mul.w	r3, r2, r3
 8001e3c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	613b      	str	r3, [r7, #16]
      break;
 8001e42:	e002      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e44:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e46:	613b      	str	r3, [r7, #16]
      break;
 8001e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e4a:	693b      	ldr	r3, [r7, #16]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	371c      	adds	r7, #28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	007a1200 	.word	0x007a1200
 8001e60:	08003460 	.word	0x08003460
 8001e64:	08003470 	.word	0x08003470
 8001e68:	003d0900 	.word	0x003d0900

08001e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e70:	4b02      	ldr	r3, [pc, #8]	@ (8001e7c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	20000000 	.word	0x20000000

08001e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e84:	f7ff fff2 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	0a1b      	lsrs	r3, r3, #8
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	4903      	ldr	r1, [pc, #12]	@ (8001ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e96:	5ccb      	ldrb	r3, [r1, r3]
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	08003458 	.word	0x08003458

08001ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001eac:	f7ff ffde 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	0adb      	lsrs	r3, r3, #11
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	4903      	ldr	r1, [pc, #12]	@ (8001ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ebe:	5ccb      	ldrb	r3, [r1, r3]
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	08003458 	.word	0x08003458

08001ed0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <RCC_Delay+0x34>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0a      	ldr	r2, [pc, #40]	@ (8001f08 <RCC_Delay+0x38>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	0a5b      	lsrs	r3, r3, #9
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	fb02 f303 	mul.w	r3, r2, r3
 8001eea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001eec:	bf00      	nop
  }
  while (Delay --);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1e5a      	subs	r2, r3, #1
 8001ef2:	60fa      	str	r2, [r7, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1f9      	bne.n	8001eec <RCC_Delay+0x1c>
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	20000000 	.word	0x20000000
 8001f08:	10624dd3 	.word	0x10624dd3

08001f0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e076      	b.n	800200c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d108      	bne.n	8001f38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f2e:	d009      	beq.n	8001f44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	61da      	str	r2, [r3, #28]
 8001f36:	e005      	b.n	8001f44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe ff9a 	bl	8000e98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc8:	ea42 0103 	orr.w	r1, r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	0c1a      	lsrs	r2, r3, #16
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f002 0204 	and.w	r2, r2, #4
 8001fea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69da      	ldr	r2, [r3, #28]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ffa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	@ 0x28
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002022:	2301      	movs	r3, #1
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002026:	f7ff f8b3 	bl	8001190 <HAL_GetTick>
 800202a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002032:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800203a:	887b      	ldrh	r3, [r7, #2]
 800203c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800203e:	7ffb      	ldrb	r3, [r7, #31]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d00c      	beq.n	800205e <HAL_SPI_TransmitReceive+0x4a>
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800204a:	d106      	bne.n	800205a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <HAL_SPI_TransmitReceive+0x46>
 8002054:	7ffb      	ldrb	r3, [r7, #31]
 8002056:	2b04      	cmp	r3, #4
 8002058:	d001      	beq.n	800205e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800205a:	2302      	movs	r3, #2
 800205c:	e17f      	b.n	800235e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_SPI_TransmitReceive+0x5c>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_SPI_TransmitReceive+0x5c>
 800206a:	887b      	ldrh	r3, [r7, #2]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e174      	b.n	800235e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <HAL_SPI_TransmitReceive+0x6e>
 800207e:	2302      	movs	r3, #2
 8002080:	e16d      	b.n	800235e <HAL_SPI_TransmitReceive+0x34a>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b04      	cmp	r3, #4
 8002094:	d003      	beq.n	800209e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2205      	movs	r2, #5
 800209a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	887a      	ldrh	r2, [r7, #2]
 80020ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	887a      	ldrh	r2, [r7, #2]
 80020c6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020de:	2b40      	cmp	r3, #64	@ 0x40
 80020e0:	d007      	beq.n	80020f2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020fa:	d17e      	bne.n	80021fa <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <HAL_SPI_TransmitReceive+0xf6>
 8002104:	8afb      	ldrh	r3, [r7, #22]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d16c      	bne.n	80021e4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	881a      	ldrh	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	1c9a      	adds	r2, r3, #2
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002124:	b29b      	uxth	r3, r3
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800212e:	e059      	b.n	80021e4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b02      	cmp	r3, #2
 800213c:	d11b      	bne.n	8002176 <HAL_SPI_TransmitReceive+0x162>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002142:	b29b      	uxth	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d016      	beq.n	8002176 <HAL_SPI_TransmitReceive+0x162>
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	2b01      	cmp	r3, #1
 800214c:	d113      	bne.n	8002176 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	881a      	ldrh	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	1c9a      	adds	r2, r3, #2
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002168:	b29b      	uxth	r3, r3
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d119      	bne.n	80021b8 <HAL_SPI_TransmitReceive+0x1a4>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d014      	beq.n	80021b8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002198:	b292      	uxth	r2, r2
 800219a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a0:	1c9a      	adds	r2, r3, #2
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021b4:	2301      	movs	r3, #1
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80021b8:	f7fe ffea 	bl	8001190 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d80d      	bhi.n	80021e4 <HAL_SPI_TransmitReceive+0x1d0>
 80021c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ce:	d009      	beq.n	80021e4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e0bc      	b.n	800235e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1a0      	bne.n	8002130 <HAL_SPI_TransmitReceive+0x11c>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d19b      	bne.n	8002130 <HAL_SPI_TransmitReceive+0x11c>
 80021f8:	e082      	b.n	8002300 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <HAL_SPI_TransmitReceive+0x1f4>
 8002202:	8afb      	ldrh	r3, [r7, #22]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d171      	bne.n	80022ec <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	330c      	adds	r3, #12
 8002212:	7812      	ldrb	r2, [r2, #0]
 8002214:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002224:	b29b      	uxth	r3, r3
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800222e:	e05d      	b.n	80022ec <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b02      	cmp	r3, #2
 800223c:	d11c      	bne.n	8002278 <HAL_SPI_TransmitReceive+0x264>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d017      	beq.n	8002278 <HAL_SPI_TransmitReceive+0x264>
 8002248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224a:	2b01      	cmp	r3, #1
 800224c:	d114      	bne.n	8002278 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	330c      	adds	r3, #12
 8002258:	7812      	ldrb	r2, [r2, #0]
 800225a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d119      	bne.n	80022ba <HAL_SPI_TransmitReceive+0x2a6>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800228a:	b29b      	uxth	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d014      	beq.n	80022ba <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022b6:	2301      	movs	r3, #1
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80022ba:	f7fe ff69 	bl	8001190 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	6a3b      	ldr	r3, [r7, #32]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d803      	bhi.n	80022d2 <HAL_SPI_TransmitReceive+0x2be>
 80022ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d102      	bne.n	80022d8 <HAL_SPI_TransmitReceive+0x2c4>
 80022d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e038      	b.n	800235e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d19c      	bne.n	8002230 <HAL_SPI_TransmitReceive+0x21c>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d197      	bne.n	8002230 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002300:	6a3a      	ldr	r2, [r7, #32]
 8002302:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 f8b7 	bl	8002478 <SPI_EndRxTxTransaction>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e01d      	b.n	800235e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10a      	bne.n	8002340 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800235c:	2300      	movs	r3, #0
  }
}
 800235e:	4618      	mov	r0, r3
 8002360:	3728      	adds	r7, #40	@ 0x28
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	4613      	mov	r3, r2
 8002376:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002378:	f7fe ff0a 	bl	8001190 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	4413      	add	r3, r2
 8002386:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002388:	f7fe ff02 	bl	8001190 <HAL_GetTick>
 800238c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800238e:	4b39      	ldr	r3, [pc, #228]	@ (8002474 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	015b      	lsls	r3, r3, #5
 8002394:	0d1b      	lsrs	r3, r3, #20
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	fb02 f303 	mul.w	r3, r2, r3
 800239c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800239e:	e054      	b.n	800244a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a6:	d050      	beq.n	800244a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023a8:	f7fe fef2 	bl	8001190 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d902      	bls.n	80023be <SPI_WaitFlagStateUntilTimeout+0x56>
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d13d      	bne.n	800243a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80023cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023d6:	d111      	bne.n	80023fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023e0:	d004      	beq.n	80023ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ea:	d107      	bne.n	80023fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002400:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002404:	d10f      	bne.n	8002426 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002424:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e017      	b.n	800246a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	3b01      	subs	r3, #1
 8002448:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4013      	ands	r3, r2
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	429a      	cmp	r2, r3
 8002458:	bf0c      	ite	eq
 800245a:	2301      	moveq	r3, #1
 800245c:	2300      	movne	r3, #0
 800245e:	b2db      	uxtb	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	429a      	cmp	r2, r3
 8002466:	d19b      	bne.n	80023a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3720      	adds	r7, #32
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000000 	.word	0x20000000

08002478 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2201      	movs	r2, #1
 800248c:	2102      	movs	r1, #2
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f7ff ff6a 	bl	8002368 <SPI_WaitFlagStateUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249e:	f043 0220 	orr.w	r2, r3, #32
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e013      	b.n	80024d2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2200      	movs	r2, #0
 80024b2:	2180      	movs	r1, #128	@ 0x80
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f7ff ff57 	bl	8002368 <SPI_WaitFlagStateUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c4:	f043 0220 	orr.w	r2, r3, #32
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e000      	b.n	80024d2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e042      	b.n	8002572 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d106      	bne.n	8002506 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7fe fd13 	bl	8000f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2224      	movs	r2, #36	@ 0x24
 800250a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800251c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fa08 	bl	8002934 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002532:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002542:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002552:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b08a      	sub	sp, #40	@ 0x28
 800257e:	af02      	add	r7, sp, #8
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	603b      	str	r3, [r7, #0]
 8002586:	4613      	mov	r3, r2
 8002588:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b20      	cmp	r3, #32
 8002598:	d175      	bne.n	8002686 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <HAL_UART_Transmit+0x2c>
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e06e      	b.n	8002688 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2221      	movs	r2, #33	@ 0x21
 80025b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025b8:	f7fe fdea 	bl	8001190 <HAL_GetTick>
 80025bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	88fa      	ldrh	r2, [r7, #6]
 80025c2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	88fa      	ldrh	r2, [r7, #6]
 80025c8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025d2:	d108      	bne.n	80025e6 <HAL_UART_Transmit+0x6c>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d104      	bne.n	80025e6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	61bb      	str	r3, [r7, #24]
 80025e4:	e003      	b.n	80025ee <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025ee:	e02e      	b.n	800264e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2200      	movs	r2, #0
 80025f8:	2180      	movs	r1, #128	@ 0x80
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f8df 	bl	80027be <UART_WaitOnFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d005      	beq.n	8002612 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e03a      	b.n	8002688 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10b      	bne.n	8002630 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002626:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	3302      	adds	r3, #2
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	e007      	b.n	8002640 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	781a      	ldrb	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3301      	adds	r3, #1
 800263e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002644:	b29b      	uxth	r3, r3
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002652:	b29b      	uxth	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1cb      	bne.n	80025f0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2200      	movs	r2, #0
 8002660:	2140      	movs	r1, #64	@ 0x40
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f8ab 	bl	80027be <UART_WaitOnFlagUntilTimeout>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2220      	movs	r2, #32
 8002672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e006      	b.n	8002688 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	e000      	b.n	8002688 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002686:	2302      	movs	r3, #2
  }
}
 8002688:	4618      	mov	r0, r3
 800268a:	3720      	adds	r7, #32
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	@ 0x28
 8002694:	af02      	add	r7, sp, #8
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	4613      	mov	r3, r2
 800269e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	f040 8081 	bne.w	80027b4 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <HAL_UART_Receive+0x2e>
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e079      	b.n	80027b6 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2222      	movs	r2, #34	@ 0x22
 80026cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026d6:	f7fe fd5b 	bl	8001190 <HAL_GetTick>
 80026da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	88fa      	ldrh	r2, [r7, #6]
 80026e0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	88fa      	ldrh	r2, [r7, #6]
 80026e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026f0:	d108      	bne.n	8002704 <HAL_UART_Receive+0x74>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d104      	bne.n	8002704 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	e003      	b.n	800270c <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002708:	2300      	movs	r3, #0
 800270a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800270c:	e047      	b.n	800279e <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2200      	movs	r2, #0
 8002716:	2120      	movs	r1, #32
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f850 	bl	80027be <UART_WaitOnFlagUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e042      	b.n	80027b6 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10c      	bne.n	8002750 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	b29b      	uxth	r3, r3
 800273e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002742:	b29a      	uxth	r2, r3
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	3302      	adds	r3, #2
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	e01f      	b.n	8002790 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002758:	d007      	beq.n	800276a <HAL_UART_Receive+0xda>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10a      	bne.n	8002778 <HAL_UART_Receive+0xe8>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	701a      	strb	r2, [r3, #0]
 8002776:	e008      	b.n	800278a <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002784:	b2da      	uxtb	r2, r3
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3301      	adds	r3, #1
 800278e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1b2      	bne.n	800270e <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	e000      	b.n	80027b6 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80027b4:	2302      	movs	r3, #2
  }
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3720      	adds	r7, #32
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	603b      	str	r3, [r7, #0]
 80027ca:	4613      	mov	r3, r2
 80027cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ce:	e03b      	b.n	8002848 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d6:	d037      	beq.n	8002848 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d8:	f7fe fcda 	bl	8001190 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	6a3a      	ldr	r2, [r7, #32]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d302      	bcc.n	80027ee <UART_WaitOnFlagUntilTimeout+0x30>
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e03a      	b.n	8002868 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d023      	beq.n	8002848 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b80      	cmp	r3, #128	@ 0x80
 8002804:	d020      	beq.n	8002848 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b40      	cmp	r3, #64	@ 0x40
 800280a:	d01d      	beq.n	8002848 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b08      	cmp	r3, #8
 8002818:	d116      	bne.n	8002848 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 f81d 	bl	8002870 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2208      	movs	r2, #8
 800283a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e00f      	b.n	8002868 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	4013      	ands	r3, r2
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	429a      	cmp	r2, r3
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	429a      	cmp	r2, r3
 8002864:	d0b4      	beq.n	80027d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002870:	b480      	push	{r7}
 8002872:	b095      	sub	sp, #84	@ 0x54
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	330c      	adds	r3, #12
 800287e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002882:	e853 3f00 	ldrex	r3, [r3]
 8002886:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800288e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	330c      	adds	r3, #12
 8002896:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002898:	643a      	str	r2, [r7, #64]	@ 0x40
 800289a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800289e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028a0:	e841 2300 	strex	r3, r2, [r1]
 80028a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e5      	bne.n	8002878 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3314      	adds	r3, #20
 80028b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	e853 3f00 	ldrex	r3, [r3]
 80028ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3314      	adds	r3, #20
 80028ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028d4:	e841 2300 	strex	r3, r2, [r1]
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1e5      	bne.n	80028ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d119      	bne.n	800291c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	e853 3f00 	ldrex	r3, [r3]
 80028f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f023 0310 	bic.w	r3, r3, #16
 80028fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	330c      	adds	r3, #12
 8002906:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002908:	61ba      	str	r2, [r7, #24]
 800290a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290c:	6979      	ldr	r1, [r7, #20]
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	e841 2300 	strex	r3, r2, [r1]
 8002914:	613b      	str	r3, [r7, #16]
   return(result);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1e5      	bne.n	80028e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800292a:	bf00      	nop
 800292c:	3754      	adds	r7, #84	@ 0x54
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800296e:	f023 030c 	bic.w	r3, r3, #12
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	430b      	orrs	r3, r1
 800297a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a2c      	ldr	r2, [pc, #176]	@ (8002a48 <UART_SetConfig+0x114>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d103      	bne.n	80029a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800299c:	f7ff fa84 	bl	8001ea8 <HAL_RCC_GetPCLK2Freq>
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	e002      	b.n	80029aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029a4:	f7ff fa6c 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 80029a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	009a      	lsls	r2, r3, #2
 80029b4:	441a      	add	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c0:	4a22      	ldr	r2, [pc, #136]	@ (8002a4c <UART_SetConfig+0x118>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	0119      	lsls	r1, r3, #4
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	009a      	lsls	r2, r3, #2
 80029d4:	441a      	add	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80029e0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a4c <UART_SetConfig+0x118>)
 80029e2:	fba3 0302 	umull	r0, r3, r3, r2
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	2064      	movs	r0, #100	@ 0x64
 80029ea:	fb00 f303 	mul.w	r3, r0, r3
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	3332      	adds	r3, #50	@ 0x32
 80029f4:	4a15      	ldr	r2, [pc, #84]	@ (8002a4c <UART_SetConfig+0x118>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a00:	4419      	add	r1, r3
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	009a      	lsls	r2, r3, #2
 8002a0c:	441a      	add	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a18:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <UART_SetConfig+0x118>)
 8002a1a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2064      	movs	r0, #100	@ 0x64
 8002a22:	fb00 f303 	mul.w	r3, r0, r3
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	3332      	adds	r3, #50	@ 0x32
 8002a2c:	4a07      	ldr	r2, [pc, #28]	@ (8002a4c <UART_SetConfig+0x118>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	f003 020f 	and.w	r2, r3, #15
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	440a      	add	r2, r1
 8002a3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40013800 	.word	0x40013800
 8002a4c:	51eb851f 	.word	0x51eb851f

08002a50 <sniprintf>:
 8002a50:	b40c      	push	{r2, r3}
 8002a52:	b530      	push	{r4, r5, lr}
 8002a54:	4b18      	ldr	r3, [pc, #96]	@ (8002ab8 <sniprintf+0x68>)
 8002a56:	1e0c      	subs	r4, r1, #0
 8002a58:	681d      	ldr	r5, [r3, #0]
 8002a5a:	b09d      	sub	sp, #116	@ 0x74
 8002a5c:	da08      	bge.n	8002a70 <sniprintf+0x20>
 8002a5e:	238b      	movs	r3, #139	@ 0x8b
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295
 8002a64:	602b      	str	r3, [r5, #0]
 8002a66:	b01d      	add	sp, #116	@ 0x74
 8002a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a6c:	b002      	add	sp, #8
 8002a6e:	4770      	bx	lr
 8002a70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002a74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002a7e:	bf0c      	ite	eq
 8002a80:	4623      	moveq	r3, r4
 8002a82:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002a86:	9304      	str	r3, [sp, #16]
 8002a88:	9307      	str	r3, [sp, #28]
 8002a8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a8e:	9002      	str	r0, [sp, #8]
 8002a90:	9006      	str	r0, [sp, #24]
 8002a92:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002a96:	4628      	mov	r0, r5
 8002a98:	ab21      	add	r3, sp, #132	@ 0x84
 8002a9a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002a9c:	a902      	add	r1, sp, #8
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	f000 f992 	bl	8002dc8 <_svfiprintf_r>
 8002aa4:	1c43      	adds	r3, r0, #1
 8002aa6:	bfbc      	itt	lt
 8002aa8:	238b      	movlt	r3, #139	@ 0x8b
 8002aaa:	602b      	strlt	r3, [r5, #0]
 8002aac:	2c00      	cmp	r4, #0
 8002aae:	d0da      	beq.n	8002a66 <sniprintf+0x16>
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	9b02      	ldr	r3, [sp, #8]
 8002ab4:	701a      	strb	r2, [r3, #0]
 8002ab6:	e7d6      	b.n	8002a66 <sniprintf+0x16>
 8002ab8:	2000000c 	.word	0x2000000c

08002abc <memset>:
 8002abc:	4603      	mov	r3, r0
 8002abe:	4402      	add	r2, r0
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d100      	bne.n	8002ac6 <memset+0xa>
 8002ac4:	4770      	bx	lr
 8002ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8002aca:	e7f9      	b.n	8002ac0 <memset+0x4>

08002acc <__errno>:
 8002acc:	4b01      	ldr	r3, [pc, #4]	@ (8002ad4 <__errno+0x8>)
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	2000000c 	.word	0x2000000c

08002ad8 <__libc_init_array>:
 8002ad8:	b570      	push	{r4, r5, r6, lr}
 8002ada:	2600      	movs	r6, #0
 8002adc:	4d0c      	ldr	r5, [pc, #48]	@ (8002b10 <__libc_init_array+0x38>)
 8002ade:	4c0d      	ldr	r4, [pc, #52]	@ (8002b14 <__libc_init_array+0x3c>)
 8002ae0:	1b64      	subs	r4, r4, r5
 8002ae2:	10a4      	asrs	r4, r4, #2
 8002ae4:	42a6      	cmp	r6, r4
 8002ae6:	d109      	bne.n	8002afc <__libc_init_array+0x24>
 8002ae8:	f000 fc76 	bl	80033d8 <_init>
 8002aec:	2600      	movs	r6, #0
 8002aee:	4d0a      	ldr	r5, [pc, #40]	@ (8002b18 <__libc_init_array+0x40>)
 8002af0:	4c0a      	ldr	r4, [pc, #40]	@ (8002b1c <__libc_init_array+0x44>)
 8002af2:	1b64      	subs	r4, r4, r5
 8002af4:	10a4      	asrs	r4, r4, #2
 8002af6:	42a6      	cmp	r6, r4
 8002af8:	d105      	bne.n	8002b06 <__libc_init_array+0x2e>
 8002afa:	bd70      	pop	{r4, r5, r6, pc}
 8002afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b00:	4798      	blx	r3
 8002b02:	3601      	adds	r6, #1
 8002b04:	e7ee      	b.n	8002ae4 <__libc_init_array+0xc>
 8002b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b0a:	4798      	blx	r3
 8002b0c:	3601      	adds	r6, #1
 8002b0e:	e7f2      	b.n	8002af6 <__libc_init_array+0x1e>
 8002b10:	080034b0 	.word	0x080034b0
 8002b14:	080034b0 	.word	0x080034b0
 8002b18:	080034b0 	.word	0x080034b0
 8002b1c:	080034b4 	.word	0x080034b4

08002b20 <__retarget_lock_acquire_recursive>:
 8002b20:	4770      	bx	lr

08002b22 <__retarget_lock_release_recursive>:
 8002b22:	4770      	bx	lr

08002b24 <_free_r>:
 8002b24:	b538      	push	{r3, r4, r5, lr}
 8002b26:	4605      	mov	r5, r0
 8002b28:	2900      	cmp	r1, #0
 8002b2a:	d040      	beq.n	8002bae <_free_r+0x8a>
 8002b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b30:	1f0c      	subs	r4, r1, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	bfb8      	it	lt
 8002b36:	18e4      	addlt	r4, r4, r3
 8002b38:	f000 f8de 	bl	8002cf8 <__malloc_lock>
 8002b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb0 <_free_r+0x8c>)
 8002b3e:	6813      	ldr	r3, [r2, #0]
 8002b40:	b933      	cbnz	r3, 8002b50 <_free_r+0x2c>
 8002b42:	6063      	str	r3, [r4, #4]
 8002b44:	6014      	str	r4, [r2, #0]
 8002b46:	4628      	mov	r0, r5
 8002b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b4c:	f000 b8da 	b.w	8002d04 <__malloc_unlock>
 8002b50:	42a3      	cmp	r3, r4
 8002b52:	d908      	bls.n	8002b66 <_free_r+0x42>
 8002b54:	6820      	ldr	r0, [r4, #0]
 8002b56:	1821      	adds	r1, r4, r0
 8002b58:	428b      	cmp	r3, r1
 8002b5a:	bf01      	itttt	eq
 8002b5c:	6819      	ldreq	r1, [r3, #0]
 8002b5e:	685b      	ldreq	r3, [r3, #4]
 8002b60:	1809      	addeq	r1, r1, r0
 8002b62:	6021      	streq	r1, [r4, #0]
 8002b64:	e7ed      	b.n	8002b42 <_free_r+0x1e>
 8002b66:	461a      	mov	r2, r3
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	b10b      	cbz	r3, 8002b70 <_free_r+0x4c>
 8002b6c:	42a3      	cmp	r3, r4
 8002b6e:	d9fa      	bls.n	8002b66 <_free_r+0x42>
 8002b70:	6811      	ldr	r1, [r2, #0]
 8002b72:	1850      	adds	r0, r2, r1
 8002b74:	42a0      	cmp	r0, r4
 8002b76:	d10b      	bne.n	8002b90 <_free_r+0x6c>
 8002b78:	6820      	ldr	r0, [r4, #0]
 8002b7a:	4401      	add	r1, r0
 8002b7c:	1850      	adds	r0, r2, r1
 8002b7e:	4283      	cmp	r3, r0
 8002b80:	6011      	str	r1, [r2, #0]
 8002b82:	d1e0      	bne.n	8002b46 <_free_r+0x22>
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4408      	add	r0, r1
 8002b8a:	6010      	str	r0, [r2, #0]
 8002b8c:	6053      	str	r3, [r2, #4]
 8002b8e:	e7da      	b.n	8002b46 <_free_r+0x22>
 8002b90:	d902      	bls.n	8002b98 <_free_r+0x74>
 8002b92:	230c      	movs	r3, #12
 8002b94:	602b      	str	r3, [r5, #0]
 8002b96:	e7d6      	b.n	8002b46 <_free_r+0x22>
 8002b98:	6820      	ldr	r0, [r4, #0]
 8002b9a:	1821      	adds	r1, r4, r0
 8002b9c:	428b      	cmp	r3, r1
 8002b9e:	bf01      	itttt	eq
 8002ba0:	6819      	ldreq	r1, [r3, #0]
 8002ba2:	685b      	ldreq	r3, [r3, #4]
 8002ba4:	1809      	addeq	r1, r1, r0
 8002ba6:	6021      	streq	r1, [r4, #0]
 8002ba8:	6063      	str	r3, [r4, #4]
 8002baa:	6054      	str	r4, [r2, #4]
 8002bac:	e7cb      	b.n	8002b46 <_free_r+0x22>
 8002bae:	bd38      	pop	{r3, r4, r5, pc}
 8002bb0:	20000264 	.word	0x20000264

08002bb4 <sbrk_aligned>:
 8002bb4:	b570      	push	{r4, r5, r6, lr}
 8002bb6:	4e0f      	ldr	r6, [pc, #60]	@ (8002bf4 <sbrk_aligned+0x40>)
 8002bb8:	460c      	mov	r4, r1
 8002bba:	6831      	ldr	r1, [r6, #0]
 8002bbc:	4605      	mov	r5, r0
 8002bbe:	b911      	cbnz	r1, 8002bc6 <sbrk_aligned+0x12>
 8002bc0:	f000 fba8 	bl	8003314 <_sbrk_r>
 8002bc4:	6030      	str	r0, [r6, #0]
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	4628      	mov	r0, r5
 8002bca:	f000 fba3 	bl	8003314 <_sbrk_r>
 8002bce:	1c43      	adds	r3, r0, #1
 8002bd0:	d103      	bne.n	8002bda <sbrk_aligned+0x26>
 8002bd2:	f04f 34ff 	mov.w	r4, #4294967295
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	bd70      	pop	{r4, r5, r6, pc}
 8002bda:	1cc4      	adds	r4, r0, #3
 8002bdc:	f024 0403 	bic.w	r4, r4, #3
 8002be0:	42a0      	cmp	r0, r4
 8002be2:	d0f8      	beq.n	8002bd6 <sbrk_aligned+0x22>
 8002be4:	1a21      	subs	r1, r4, r0
 8002be6:	4628      	mov	r0, r5
 8002be8:	f000 fb94 	bl	8003314 <_sbrk_r>
 8002bec:	3001      	adds	r0, #1
 8002bee:	d1f2      	bne.n	8002bd6 <sbrk_aligned+0x22>
 8002bf0:	e7ef      	b.n	8002bd2 <sbrk_aligned+0x1e>
 8002bf2:	bf00      	nop
 8002bf4:	20000260 	.word	0x20000260

08002bf8 <_malloc_r>:
 8002bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bfc:	1ccd      	adds	r5, r1, #3
 8002bfe:	f025 0503 	bic.w	r5, r5, #3
 8002c02:	3508      	adds	r5, #8
 8002c04:	2d0c      	cmp	r5, #12
 8002c06:	bf38      	it	cc
 8002c08:	250c      	movcc	r5, #12
 8002c0a:	2d00      	cmp	r5, #0
 8002c0c:	4606      	mov	r6, r0
 8002c0e:	db01      	blt.n	8002c14 <_malloc_r+0x1c>
 8002c10:	42a9      	cmp	r1, r5
 8002c12:	d904      	bls.n	8002c1e <_malloc_r+0x26>
 8002c14:	230c      	movs	r3, #12
 8002c16:	6033      	str	r3, [r6, #0]
 8002c18:	2000      	movs	r0, #0
 8002c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002cf4 <_malloc_r+0xfc>
 8002c22:	f000 f869 	bl	8002cf8 <__malloc_lock>
 8002c26:	f8d8 3000 	ldr.w	r3, [r8]
 8002c2a:	461c      	mov	r4, r3
 8002c2c:	bb44      	cbnz	r4, 8002c80 <_malloc_r+0x88>
 8002c2e:	4629      	mov	r1, r5
 8002c30:	4630      	mov	r0, r6
 8002c32:	f7ff ffbf 	bl	8002bb4 <sbrk_aligned>
 8002c36:	1c43      	adds	r3, r0, #1
 8002c38:	4604      	mov	r4, r0
 8002c3a:	d158      	bne.n	8002cee <_malloc_r+0xf6>
 8002c3c:	f8d8 4000 	ldr.w	r4, [r8]
 8002c40:	4627      	mov	r7, r4
 8002c42:	2f00      	cmp	r7, #0
 8002c44:	d143      	bne.n	8002cce <_malloc_r+0xd6>
 8002c46:	2c00      	cmp	r4, #0
 8002c48:	d04b      	beq.n	8002ce2 <_malloc_r+0xea>
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	4639      	mov	r1, r7
 8002c4e:	4630      	mov	r0, r6
 8002c50:	eb04 0903 	add.w	r9, r4, r3
 8002c54:	f000 fb5e 	bl	8003314 <_sbrk_r>
 8002c58:	4581      	cmp	r9, r0
 8002c5a:	d142      	bne.n	8002ce2 <_malloc_r+0xea>
 8002c5c:	6821      	ldr	r1, [r4, #0]
 8002c5e:	4630      	mov	r0, r6
 8002c60:	1a6d      	subs	r5, r5, r1
 8002c62:	4629      	mov	r1, r5
 8002c64:	f7ff ffa6 	bl	8002bb4 <sbrk_aligned>
 8002c68:	3001      	adds	r0, #1
 8002c6a:	d03a      	beq.n	8002ce2 <_malloc_r+0xea>
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	442b      	add	r3, r5
 8002c70:	6023      	str	r3, [r4, #0]
 8002c72:	f8d8 3000 	ldr.w	r3, [r8]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	bb62      	cbnz	r2, 8002cd4 <_malloc_r+0xdc>
 8002c7a:	f8c8 7000 	str.w	r7, [r8]
 8002c7e:	e00f      	b.n	8002ca0 <_malloc_r+0xa8>
 8002c80:	6822      	ldr	r2, [r4, #0]
 8002c82:	1b52      	subs	r2, r2, r5
 8002c84:	d420      	bmi.n	8002cc8 <_malloc_r+0xd0>
 8002c86:	2a0b      	cmp	r2, #11
 8002c88:	d917      	bls.n	8002cba <_malloc_r+0xc2>
 8002c8a:	1961      	adds	r1, r4, r5
 8002c8c:	42a3      	cmp	r3, r4
 8002c8e:	6025      	str	r5, [r4, #0]
 8002c90:	bf18      	it	ne
 8002c92:	6059      	strne	r1, [r3, #4]
 8002c94:	6863      	ldr	r3, [r4, #4]
 8002c96:	bf08      	it	eq
 8002c98:	f8c8 1000 	streq.w	r1, [r8]
 8002c9c:	5162      	str	r2, [r4, r5]
 8002c9e:	604b      	str	r3, [r1, #4]
 8002ca0:	4630      	mov	r0, r6
 8002ca2:	f000 f82f 	bl	8002d04 <__malloc_unlock>
 8002ca6:	f104 000b 	add.w	r0, r4, #11
 8002caa:	1d23      	adds	r3, r4, #4
 8002cac:	f020 0007 	bic.w	r0, r0, #7
 8002cb0:	1ac2      	subs	r2, r0, r3
 8002cb2:	bf1c      	itt	ne
 8002cb4:	1a1b      	subne	r3, r3, r0
 8002cb6:	50a3      	strne	r3, [r4, r2]
 8002cb8:	e7af      	b.n	8002c1a <_malloc_r+0x22>
 8002cba:	6862      	ldr	r2, [r4, #4]
 8002cbc:	42a3      	cmp	r3, r4
 8002cbe:	bf0c      	ite	eq
 8002cc0:	f8c8 2000 	streq.w	r2, [r8]
 8002cc4:	605a      	strne	r2, [r3, #4]
 8002cc6:	e7eb      	b.n	8002ca0 <_malloc_r+0xa8>
 8002cc8:	4623      	mov	r3, r4
 8002cca:	6864      	ldr	r4, [r4, #4]
 8002ccc:	e7ae      	b.n	8002c2c <_malloc_r+0x34>
 8002cce:	463c      	mov	r4, r7
 8002cd0:	687f      	ldr	r7, [r7, #4]
 8002cd2:	e7b6      	b.n	8002c42 <_malloc_r+0x4a>
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	42a3      	cmp	r3, r4
 8002cda:	d1fb      	bne.n	8002cd4 <_malloc_r+0xdc>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	6053      	str	r3, [r2, #4]
 8002ce0:	e7de      	b.n	8002ca0 <_malloc_r+0xa8>
 8002ce2:	230c      	movs	r3, #12
 8002ce4:	4630      	mov	r0, r6
 8002ce6:	6033      	str	r3, [r6, #0]
 8002ce8:	f000 f80c 	bl	8002d04 <__malloc_unlock>
 8002cec:	e794      	b.n	8002c18 <_malloc_r+0x20>
 8002cee:	6005      	str	r5, [r0, #0]
 8002cf0:	e7d6      	b.n	8002ca0 <_malloc_r+0xa8>
 8002cf2:	bf00      	nop
 8002cf4:	20000264 	.word	0x20000264

08002cf8 <__malloc_lock>:
 8002cf8:	4801      	ldr	r0, [pc, #4]	@ (8002d00 <__malloc_lock+0x8>)
 8002cfa:	f7ff bf11 	b.w	8002b20 <__retarget_lock_acquire_recursive>
 8002cfe:	bf00      	nop
 8002d00:	2000025c 	.word	0x2000025c

08002d04 <__malloc_unlock>:
 8002d04:	4801      	ldr	r0, [pc, #4]	@ (8002d0c <__malloc_unlock+0x8>)
 8002d06:	f7ff bf0c 	b.w	8002b22 <__retarget_lock_release_recursive>
 8002d0a:	bf00      	nop
 8002d0c:	2000025c 	.word	0x2000025c

08002d10 <__ssputs_r>:
 8002d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d14:	461f      	mov	r7, r3
 8002d16:	688e      	ldr	r6, [r1, #8]
 8002d18:	4682      	mov	sl, r0
 8002d1a:	42be      	cmp	r6, r7
 8002d1c:	460c      	mov	r4, r1
 8002d1e:	4690      	mov	r8, r2
 8002d20:	680b      	ldr	r3, [r1, #0]
 8002d22:	d82d      	bhi.n	8002d80 <__ssputs_r+0x70>
 8002d24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002d28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002d2c:	d026      	beq.n	8002d7c <__ssputs_r+0x6c>
 8002d2e:	6965      	ldr	r5, [r4, #20]
 8002d30:	6909      	ldr	r1, [r1, #16]
 8002d32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d36:	eba3 0901 	sub.w	r9, r3, r1
 8002d3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d3e:	1c7b      	adds	r3, r7, #1
 8002d40:	444b      	add	r3, r9
 8002d42:	106d      	asrs	r5, r5, #1
 8002d44:	429d      	cmp	r5, r3
 8002d46:	bf38      	it	cc
 8002d48:	461d      	movcc	r5, r3
 8002d4a:	0553      	lsls	r3, r2, #21
 8002d4c:	d527      	bpl.n	8002d9e <__ssputs_r+0x8e>
 8002d4e:	4629      	mov	r1, r5
 8002d50:	f7ff ff52 	bl	8002bf8 <_malloc_r>
 8002d54:	4606      	mov	r6, r0
 8002d56:	b360      	cbz	r0, 8002db2 <__ssputs_r+0xa2>
 8002d58:	464a      	mov	r2, r9
 8002d5a:	6921      	ldr	r1, [r4, #16]
 8002d5c:	f000 faf8 	bl	8003350 <memcpy>
 8002d60:	89a3      	ldrh	r3, [r4, #12]
 8002d62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d6a:	81a3      	strh	r3, [r4, #12]
 8002d6c:	6126      	str	r6, [r4, #16]
 8002d6e:	444e      	add	r6, r9
 8002d70:	6026      	str	r6, [r4, #0]
 8002d72:	463e      	mov	r6, r7
 8002d74:	6165      	str	r5, [r4, #20]
 8002d76:	eba5 0509 	sub.w	r5, r5, r9
 8002d7a:	60a5      	str	r5, [r4, #8]
 8002d7c:	42be      	cmp	r6, r7
 8002d7e:	d900      	bls.n	8002d82 <__ssputs_r+0x72>
 8002d80:	463e      	mov	r6, r7
 8002d82:	4632      	mov	r2, r6
 8002d84:	4641      	mov	r1, r8
 8002d86:	6820      	ldr	r0, [r4, #0]
 8002d88:	f000 faaa 	bl	80032e0 <memmove>
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	68a3      	ldr	r3, [r4, #8]
 8002d90:	1b9b      	subs	r3, r3, r6
 8002d92:	60a3      	str	r3, [r4, #8]
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	4433      	add	r3, r6
 8002d98:	6023      	str	r3, [r4, #0]
 8002d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d9e:	462a      	mov	r2, r5
 8002da0:	f000 fae4 	bl	800336c <_realloc_r>
 8002da4:	4606      	mov	r6, r0
 8002da6:	2800      	cmp	r0, #0
 8002da8:	d1e0      	bne.n	8002d6c <__ssputs_r+0x5c>
 8002daa:	4650      	mov	r0, sl
 8002dac:	6921      	ldr	r1, [r4, #16]
 8002dae:	f7ff feb9 	bl	8002b24 <_free_r>
 8002db2:	230c      	movs	r3, #12
 8002db4:	f8ca 3000 	str.w	r3, [sl]
 8002db8:	89a3      	ldrh	r3, [r4, #12]
 8002dba:	f04f 30ff 	mov.w	r0, #4294967295
 8002dbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dc2:	81a3      	strh	r3, [r4, #12]
 8002dc4:	e7e9      	b.n	8002d9a <__ssputs_r+0x8a>
	...

08002dc8 <_svfiprintf_r>:
 8002dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dcc:	4698      	mov	r8, r3
 8002dce:	898b      	ldrh	r3, [r1, #12]
 8002dd0:	4607      	mov	r7, r0
 8002dd2:	061b      	lsls	r3, r3, #24
 8002dd4:	460d      	mov	r5, r1
 8002dd6:	4614      	mov	r4, r2
 8002dd8:	b09d      	sub	sp, #116	@ 0x74
 8002dda:	d510      	bpl.n	8002dfe <_svfiprintf_r+0x36>
 8002ddc:	690b      	ldr	r3, [r1, #16]
 8002dde:	b973      	cbnz	r3, 8002dfe <_svfiprintf_r+0x36>
 8002de0:	2140      	movs	r1, #64	@ 0x40
 8002de2:	f7ff ff09 	bl	8002bf8 <_malloc_r>
 8002de6:	6028      	str	r0, [r5, #0]
 8002de8:	6128      	str	r0, [r5, #16]
 8002dea:	b930      	cbnz	r0, 8002dfa <_svfiprintf_r+0x32>
 8002dec:	230c      	movs	r3, #12
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	f04f 30ff 	mov.w	r0, #4294967295
 8002df4:	b01d      	add	sp, #116	@ 0x74
 8002df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dfa:	2340      	movs	r3, #64	@ 0x40
 8002dfc:	616b      	str	r3, [r5, #20]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e02:	2320      	movs	r3, #32
 8002e04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002e08:	2330      	movs	r3, #48	@ 0x30
 8002e0a:	f04f 0901 	mov.w	r9, #1
 8002e0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e12:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002fac <_svfiprintf_r+0x1e4>
 8002e16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002e1a:	4623      	mov	r3, r4
 8002e1c:	469a      	mov	sl, r3
 8002e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e22:	b10a      	cbz	r2, 8002e28 <_svfiprintf_r+0x60>
 8002e24:	2a25      	cmp	r2, #37	@ 0x25
 8002e26:	d1f9      	bne.n	8002e1c <_svfiprintf_r+0x54>
 8002e28:	ebba 0b04 	subs.w	fp, sl, r4
 8002e2c:	d00b      	beq.n	8002e46 <_svfiprintf_r+0x7e>
 8002e2e:	465b      	mov	r3, fp
 8002e30:	4622      	mov	r2, r4
 8002e32:	4629      	mov	r1, r5
 8002e34:	4638      	mov	r0, r7
 8002e36:	f7ff ff6b 	bl	8002d10 <__ssputs_r>
 8002e3a:	3001      	adds	r0, #1
 8002e3c:	f000 80a7 	beq.w	8002f8e <_svfiprintf_r+0x1c6>
 8002e40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002e42:	445a      	add	r2, fp
 8002e44:	9209      	str	r2, [sp, #36]	@ 0x24
 8002e46:	f89a 3000 	ldrb.w	r3, [sl]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 809f 	beq.w	8002f8e <_svfiprintf_r+0x1c6>
 8002e50:	2300      	movs	r3, #0
 8002e52:	f04f 32ff 	mov.w	r2, #4294967295
 8002e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e5a:	f10a 0a01 	add.w	sl, sl, #1
 8002e5e:	9304      	str	r3, [sp, #16]
 8002e60:	9307      	str	r3, [sp, #28]
 8002e62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002e66:	931a      	str	r3, [sp, #104]	@ 0x68
 8002e68:	4654      	mov	r4, sl
 8002e6a:	2205      	movs	r2, #5
 8002e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e70:	484e      	ldr	r0, [pc, #312]	@ (8002fac <_svfiprintf_r+0x1e4>)
 8002e72:	f000 fa5f 	bl	8003334 <memchr>
 8002e76:	9a04      	ldr	r2, [sp, #16]
 8002e78:	b9d8      	cbnz	r0, 8002eb2 <_svfiprintf_r+0xea>
 8002e7a:	06d0      	lsls	r0, r2, #27
 8002e7c:	bf44      	itt	mi
 8002e7e:	2320      	movmi	r3, #32
 8002e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e84:	0711      	lsls	r1, r2, #28
 8002e86:	bf44      	itt	mi
 8002e88:	232b      	movmi	r3, #43	@ 0x2b
 8002e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8002e92:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e94:	d015      	beq.n	8002ec2 <_svfiprintf_r+0xfa>
 8002e96:	4654      	mov	r4, sl
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f04f 0c0a 	mov.w	ip, #10
 8002e9e:	9a07      	ldr	r2, [sp, #28]
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ea6:	3b30      	subs	r3, #48	@ 0x30
 8002ea8:	2b09      	cmp	r3, #9
 8002eaa:	d94b      	bls.n	8002f44 <_svfiprintf_r+0x17c>
 8002eac:	b1b0      	cbz	r0, 8002edc <_svfiprintf_r+0x114>
 8002eae:	9207      	str	r2, [sp, #28]
 8002eb0:	e014      	b.n	8002edc <_svfiprintf_r+0x114>
 8002eb2:	eba0 0308 	sub.w	r3, r0, r8
 8002eb6:	fa09 f303 	lsl.w	r3, r9, r3
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	46a2      	mov	sl, r4
 8002ebe:	9304      	str	r3, [sp, #16]
 8002ec0:	e7d2      	b.n	8002e68 <_svfiprintf_r+0xa0>
 8002ec2:	9b03      	ldr	r3, [sp, #12]
 8002ec4:	1d19      	adds	r1, r3, #4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	9103      	str	r1, [sp, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	bfbb      	ittet	lt
 8002ece:	425b      	neglt	r3, r3
 8002ed0:	f042 0202 	orrlt.w	r2, r2, #2
 8002ed4:	9307      	strge	r3, [sp, #28]
 8002ed6:	9307      	strlt	r3, [sp, #28]
 8002ed8:	bfb8      	it	lt
 8002eda:	9204      	strlt	r2, [sp, #16]
 8002edc:	7823      	ldrb	r3, [r4, #0]
 8002ede:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ee0:	d10a      	bne.n	8002ef8 <_svfiprintf_r+0x130>
 8002ee2:	7863      	ldrb	r3, [r4, #1]
 8002ee4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ee6:	d132      	bne.n	8002f4e <_svfiprintf_r+0x186>
 8002ee8:	9b03      	ldr	r3, [sp, #12]
 8002eea:	3402      	adds	r4, #2
 8002eec:	1d1a      	adds	r2, r3, #4
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	9203      	str	r2, [sp, #12]
 8002ef2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002ef6:	9305      	str	r3, [sp, #20]
 8002ef8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002fb0 <_svfiprintf_r+0x1e8>
 8002efc:	2203      	movs	r2, #3
 8002efe:	4650      	mov	r0, sl
 8002f00:	7821      	ldrb	r1, [r4, #0]
 8002f02:	f000 fa17 	bl	8003334 <memchr>
 8002f06:	b138      	cbz	r0, 8002f18 <_svfiprintf_r+0x150>
 8002f08:	2240      	movs	r2, #64	@ 0x40
 8002f0a:	9b04      	ldr	r3, [sp, #16]
 8002f0c:	eba0 000a 	sub.w	r0, r0, sl
 8002f10:	4082      	lsls	r2, r0
 8002f12:	4313      	orrs	r3, r2
 8002f14:	3401      	adds	r4, #1
 8002f16:	9304      	str	r3, [sp, #16]
 8002f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f1c:	2206      	movs	r2, #6
 8002f1e:	4825      	ldr	r0, [pc, #148]	@ (8002fb4 <_svfiprintf_r+0x1ec>)
 8002f20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002f24:	f000 fa06 	bl	8003334 <memchr>
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	d036      	beq.n	8002f9a <_svfiprintf_r+0x1d2>
 8002f2c:	4b22      	ldr	r3, [pc, #136]	@ (8002fb8 <_svfiprintf_r+0x1f0>)
 8002f2e:	bb1b      	cbnz	r3, 8002f78 <_svfiprintf_r+0x1b0>
 8002f30:	9b03      	ldr	r3, [sp, #12]
 8002f32:	3307      	adds	r3, #7
 8002f34:	f023 0307 	bic.w	r3, r3, #7
 8002f38:	3308      	adds	r3, #8
 8002f3a:	9303      	str	r3, [sp, #12]
 8002f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f3e:	4433      	add	r3, r6
 8002f40:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f42:	e76a      	b.n	8002e1a <_svfiprintf_r+0x52>
 8002f44:	460c      	mov	r4, r1
 8002f46:	2001      	movs	r0, #1
 8002f48:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f4c:	e7a8      	b.n	8002ea0 <_svfiprintf_r+0xd8>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f04f 0c0a 	mov.w	ip, #10
 8002f54:	4619      	mov	r1, r3
 8002f56:	3401      	adds	r4, #1
 8002f58:	9305      	str	r3, [sp, #20]
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f60:	3a30      	subs	r2, #48	@ 0x30
 8002f62:	2a09      	cmp	r2, #9
 8002f64:	d903      	bls.n	8002f6e <_svfiprintf_r+0x1a6>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0c6      	beq.n	8002ef8 <_svfiprintf_r+0x130>
 8002f6a:	9105      	str	r1, [sp, #20]
 8002f6c:	e7c4      	b.n	8002ef8 <_svfiprintf_r+0x130>
 8002f6e:	4604      	mov	r4, r0
 8002f70:	2301      	movs	r3, #1
 8002f72:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f76:	e7f0      	b.n	8002f5a <_svfiprintf_r+0x192>
 8002f78:	ab03      	add	r3, sp, #12
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	462a      	mov	r2, r5
 8002f7e:	4638      	mov	r0, r7
 8002f80:	4b0e      	ldr	r3, [pc, #56]	@ (8002fbc <_svfiprintf_r+0x1f4>)
 8002f82:	a904      	add	r1, sp, #16
 8002f84:	f3af 8000 	nop.w
 8002f88:	1c42      	adds	r2, r0, #1
 8002f8a:	4606      	mov	r6, r0
 8002f8c:	d1d6      	bne.n	8002f3c <_svfiprintf_r+0x174>
 8002f8e:	89ab      	ldrh	r3, [r5, #12]
 8002f90:	065b      	lsls	r3, r3, #25
 8002f92:	f53f af2d 	bmi.w	8002df0 <_svfiprintf_r+0x28>
 8002f96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002f98:	e72c      	b.n	8002df4 <_svfiprintf_r+0x2c>
 8002f9a:	ab03      	add	r3, sp, #12
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	462a      	mov	r2, r5
 8002fa0:	4638      	mov	r0, r7
 8002fa2:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <_svfiprintf_r+0x1f4>)
 8002fa4:	a904      	add	r1, sp, #16
 8002fa6:	f000 f87d 	bl	80030a4 <_printf_i>
 8002faa:	e7ed      	b.n	8002f88 <_svfiprintf_r+0x1c0>
 8002fac:	08003472 	.word	0x08003472
 8002fb0:	08003478 	.word	0x08003478
 8002fb4:	0800347c 	.word	0x0800347c
 8002fb8:	00000000 	.word	0x00000000
 8002fbc:	08002d11 	.word	0x08002d11

08002fc0 <_printf_common>:
 8002fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fc4:	4616      	mov	r6, r2
 8002fc6:	4698      	mov	r8, r3
 8002fc8:	688a      	ldr	r2, [r1, #8]
 8002fca:	690b      	ldr	r3, [r1, #16]
 8002fcc:	4607      	mov	r7, r0
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	bfb8      	it	lt
 8002fd2:	4613      	movlt	r3, r2
 8002fd4:	6033      	str	r3, [r6, #0]
 8002fd6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002fda:	460c      	mov	r4, r1
 8002fdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002fe0:	b10a      	cbz	r2, 8002fe6 <_printf_common+0x26>
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	6033      	str	r3, [r6, #0]
 8002fe6:	6823      	ldr	r3, [r4, #0]
 8002fe8:	0699      	lsls	r1, r3, #26
 8002fea:	bf42      	ittt	mi
 8002fec:	6833      	ldrmi	r3, [r6, #0]
 8002fee:	3302      	addmi	r3, #2
 8002ff0:	6033      	strmi	r3, [r6, #0]
 8002ff2:	6825      	ldr	r5, [r4, #0]
 8002ff4:	f015 0506 	ands.w	r5, r5, #6
 8002ff8:	d106      	bne.n	8003008 <_printf_common+0x48>
 8002ffa:	f104 0a19 	add.w	sl, r4, #25
 8002ffe:	68e3      	ldr	r3, [r4, #12]
 8003000:	6832      	ldr	r2, [r6, #0]
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	42ab      	cmp	r3, r5
 8003006:	dc2b      	bgt.n	8003060 <_printf_common+0xa0>
 8003008:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800300c:	6822      	ldr	r2, [r4, #0]
 800300e:	3b00      	subs	r3, #0
 8003010:	bf18      	it	ne
 8003012:	2301      	movne	r3, #1
 8003014:	0692      	lsls	r2, r2, #26
 8003016:	d430      	bmi.n	800307a <_printf_common+0xba>
 8003018:	4641      	mov	r1, r8
 800301a:	4638      	mov	r0, r7
 800301c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003020:	47c8      	blx	r9
 8003022:	3001      	adds	r0, #1
 8003024:	d023      	beq.n	800306e <_printf_common+0xae>
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	6922      	ldr	r2, [r4, #16]
 800302a:	f003 0306 	and.w	r3, r3, #6
 800302e:	2b04      	cmp	r3, #4
 8003030:	bf14      	ite	ne
 8003032:	2500      	movne	r5, #0
 8003034:	6833      	ldreq	r3, [r6, #0]
 8003036:	f04f 0600 	mov.w	r6, #0
 800303a:	bf08      	it	eq
 800303c:	68e5      	ldreq	r5, [r4, #12]
 800303e:	f104 041a 	add.w	r4, r4, #26
 8003042:	bf08      	it	eq
 8003044:	1aed      	subeq	r5, r5, r3
 8003046:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800304a:	bf08      	it	eq
 800304c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003050:	4293      	cmp	r3, r2
 8003052:	bfc4      	itt	gt
 8003054:	1a9b      	subgt	r3, r3, r2
 8003056:	18ed      	addgt	r5, r5, r3
 8003058:	42b5      	cmp	r5, r6
 800305a:	d11a      	bne.n	8003092 <_printf_common+0xd2>
 800305c:	2000      	movs	r0, #0
 800305e:	e008      	b.n	8003072 <_printf_common+0xb2>
 8003060:	2301      	movs	r3, #1
 8003062:	4652      	mov	r2, sl
 8003064:	4641      	mov	r1, r8
 8003066:	4638      	mov	r0, r7
 8003068:	47c8      	blx	r9
 800306a:	3001      	adds	r0, #1
 800306c:	d103      	bne.n	8003076 <_printf_common+0xb6>
 800306e:	f04f 30ff 	mov.w	r0, #4294967295
 8003072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003076:	3501      	adds	r5, #1
 8003078:	e7c1      	b.n	8002ffe <_printf_common+0x3e>
 800307a:	2030      	movs	r0, #48	@ 0x30
 800307c:	18e1      	adds	r1, r4, r3
 800307e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003088:	4422      	add	r2, r4
 800308a:	3302      	adds	r3, #2
 800308c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003090:	e7c2      	b.n	8003018 <_printf_common+0x58>
 8003092:	2301      	movs	r3, #1
 8003094:	4622      	mov	r2, r4
 8003096:	4641      	mov	r1, r8
 8003098:	4638      	mov	r0, r7
 800309a:	47c8      	blx	r9
 800309c:	3001      	adds	r0, #1
 800309e:	d0e6      	beq.n	800306e <_printf_common+0xae>
 80030a0:	3601      	adds	r6, #1
 80030a2:	e7d9      	b.n	8003058 <_printf_common+0x98>

080030a4 <_printf_i>:
 80030a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030a8:	7e0f      	ldrb	r7, [r1, #24]
 80030aa:	4691      	mov	r9, r2
 80030ac:	2f78      	cmp	r7, #120	@ 0x78
 80030ae:	4680      	mov	r8, r0
 80030b0:	460c      	mov	r4, r1
 80030b2:	469a      	mov	sl, r3
 80030b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80030b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80030ba:	d807      	bhi.n	80030cc <_printf_i+0x28>
 80030bc:	2f62      	cmp	r7, #98	@ 0x62
 80030be:	d80a      	bhi.n	80030d6 <_printf_i+0x32>
 80030c0:	2f00      	cmp	r7, #0
 80030c2:	f000 80d1 	beq.w	8003268 <_printf_i+0x1c4>
 80030c6:	2f58      	cmp	r7, #88	@ 0x58
 80030c8:	f000 80b8 	beq.w	800323c <_printf_i+0x198>
 80030cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80030d4:	e03a      	b.n	800314c <_printf_i+0xa8>
 80030d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80030da:	2b15      	cmp	r3, #21
 80030dc:	d8f6      	bhi.n	80030cc <_printf_i+0x28>
 80030de:	a101      	add	r1, pc, #4	@ (adr r1, 80030e4 <_printf_i+0x40>)
 80030e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030e4:	0800313d 	.word	0x0800313d
 80030e8:	08003151 	.word	0x08003151
 80030ec:	080030cd 	.word	0x080030cd
 80030f0:	080030cd 	.word	0x080030cd
 80030f4:	080030cd 	.word	0x080030cd
 80030f8:	080030cd 	.word	0x080030cd
 80030fc:	08003151 	.word	0x08003151
 8003100:	080030cd 	.word	0x080030cd
 8003104:	080030cd 	.word	0x080030cd
 8003108:	080030cd 	.word	0x080030cd
 800310c:	080030cd 	.word	0x080030cd
 8003110:	0800324f 	.word	0x0800324f
 8003114:	0800317b 	.word	0x0800317b
 8003118:	08003209 	.word	0x08003209
 800311c:	080030cd 	.word	0x080030cd
 8003120:	080030cd 	.word	0x080030cd
 8003124:	08003271 	.word	0x08003271
 8003128:	080030cd 	.word	0x080030cd
 800312c:	0800317b 	.word	0x0800317b
 8003130:	080030cd 	.word	0x080030cd
 8003134:	080030cd 	.word	0x080030cd
 8003138:	08003211 	.word	0x08003211
 800313c:	6833      	ldr	r3, [r6, #0]
 800313e:	1d1a      	adds	r2, r3, #4
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6032      	str	r2, [r6, #0]
 8003144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003148:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800314c:	2301      	movs	r3, #1
 800314e:	e09c      	b.n	800328a <_printf_i+0x1e6>
 8003150:	6833      	ldr	r3, [r6, #0]
 8003152:	6820      	ldr	r0, [r4, #0]
 8003154:	1d19      	adds	r1, r3, #4
 8003156:	6031      	str	r1, [r6, #0]
 8003158:	0606      	lsls	r6, r0, #24
 800315a:	d501      	bpl.n	8003160 <_printf_i+0xbc>
 800315c:	681d      	ldr	r5, [r3, #0]
 800315e:	e003      	b.n	8003168 <_printf_i+0xc4>
 8003160:	0645      	lsls	r5, r0, #25
 8003162:	d5fb      	bpl.n	800315c <_printf_i+0xb8>
 8003164:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003168:	2d00      	cmp	r5, #0
 800316a:	da03      	bge.n	8003174 <_printf_i+0xd0>
 800316c:	232d      	movs	r3, #45	@ 0x2d
 800316e:	426d      	negs	r5, r5
 8003170:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003174:	230a      	movs	r3, #10
 8003176:	4858      	ldr	r0, [pc, #352]	@ (80032d8 <_printf_i+0x234>)
 8003178:	e011      	b.n	800319e <_printf_i+0xfa>
 800317a:	6821      	ldr	r1, [r4, #0]
 800317c:	6833      	ldr	r3, [r6, #0]
 800317e:	0608      	lsls	r0, r1, #24
 8003180:	f853 5b04 	ldr.w	r5, [r3], #4
 8003184:	d402      	bmi.n	800318c <_printf_i+0xe8>
 8003186:	0649      	lsls	r1, r1, #25
 8003188:	bf48      	it	mi
 800318a:	b2ad      	uxthmi	r5, r5
 800318c:	2f6f      	cmp	r7, #111	@ 0x6f
 800318e:	6033      	str	r3, [r6, #0]
 8003190:	bf14      	ite	ne
 8003192:	230a      	movne	r3, #10
 8003194:	2308      	moveq	r3, #8
 8003196:	4850      	ldr	r0, [pc, #320]	@ (80032d8 <_printf_i+0x234>)
 8003198:	2100      	movs	r1, #0
 800319a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800319e:	6866      	ldr	r6, [r4, #4]
 80031a0:	2e00      	cmp	r6, #0
 80031a2:	60a6      	str	r6, [r4, #8]
 80031a4:	db05      	blt.n	80031b2 <_printf_i+0x10e>
 80031a6:	6821      	ldr	r1, [r4, #0]
 80031a8:	432e      	orrs	r6, r5
 80031aa:	f021 0104 	bic.w	r1, r1, #4
 80031ae:	6021      	str	r1, [r4, #0]
 80031b0:	d04b      	beq.n	800324a <_printf_i+0x1a6>
 80031b2:	4616      	mov	r6, r2
 80031b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80031b8:	fb03 5711 	mls	r7, r3, r1, r5
 80031bc:	5dc7      	ldrb	r7, [r0, r7]
 80031be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031c2:	462f      	mov	r7, r5
 80031c4:	42bb      	cmp	r3, r7
 80031c6:	460d      	mov	r5, r1
 80031c8:	d9f4      	bls.n	80031b4 <_printf_i+0x110>
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d10b      	bne.n	80031e6 <_printf_i+0x142>
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	07df      	lsls	r7, r3, #31
 80031d2:	d508      	bpl.n	80031e6 <_printf_i+0x142>
 80031d4:	6923      	ldr	r3, [r4, #16]
 80031d6:	6861      	ldr	r1, [r4, #4]
 80031d8:	4299      	cmp	r1, r3
 80031da:	bfde      	ittt	le
 80031dc:	2330      	movle	r3, #48	@ 0x30
 80031de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031e6:	1b92      	subs	r2, r2, r6
 80031e8:	6122      	str	r2, [r4, #16]
 80031ea:	464b      	mov	r3, r9
 80031ec:	4621      	mov	r1, r4
 80031ee:	4640      	mov	r0, r8
 80031f0:	f8cd a000 	str.w	sl, [sp]
 80031f4:	aa03      	add	r2, sp, #12
 80031f6:	f7ff fee3 	bl	8002fc0 <_printf_common>
 80031fa:	3001      	adds	r0, #1
 80031fc:	d14a      	bne.n	8003294 <_printf_i+0x1f0>
 80031fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003202:	b004      	add	sp, #16
 8003204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	f043 0320 	orr.w	r3, r3, #32
 800320e:	6023      	str	r3, [r4, #0]
 8003210:	2778      	movs	r7, #120	@ 0x78
 8003212:	4832      	ldr	r0, [pc, #200]	@ (80032dc <_printf_i+0x238>)
 8003214:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	6831      	ldr	r1, [r6, #0]
 800321c:	061f      	lsls	r7, r3, #24
 800321e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003222:	d402      	bmi.n	800322a <_printf_i+0x186>
 8003224:	065f      	lsls	r7, r3, #25
 8003226:	bf48      	it	mi
 8003228:	b2ad      	uxthmi	r5, r5
 800322a:	6031      	str	r1, [r6, #0]
 800322c:	07d9      	lsls	r1, r3, #31
 800322e:	bf44      	itt	mi
 8003230:	f043 0320 	orrmi.w	r3, r3, #32
 8003234:	6023      	strmi	r3, [r4, #0]
 8003236:	b11d      	cbz	r5, 8003240 <_printf_i+0x19c>
 8003238:	2310      	movs	r3, #16
 800323a:	e7ad      	b.n	8003198 <_printf_i+0xf4>
 800323c:	4826      	ldr	r0, [pc, #152]	@ (80032d8 <_printf_i+0x234>)
 800323e:	e7e9      	b.n	8003214 <_printf_i+0x170>
 8003240:	6823      	ldr	r3, [r4, #0]
 8003242:	f023 0320 	bic.w	r3, r3, #32
 8003246:	6023      	str	r3, [r4, #0]
 8003248:	e7f6      	b.n	8003238 <_printf_i+0x194>
 800324a:	4616      	mov	r6, r2
 800324c:	e7bd      	b.n	80031ca <_printf_i+0x126>
 800324e:	6833      	ldr	r3, [r6, #0]
 8003250:	6825      	ldr	r5, [r4, #0]
 8003252:	1d18      	adds	r0, r3, #4
 8003254:	6961      	ldr	r1, [r4, #20]
 8003256:	6030      	str	r0, [r6, #0]
 8003258:	062e      	lsls	r6, r5, #24
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	d501      	bpl.n	8003262 <_printf_i+0x1be>
 800325e:	6019      	str	r1, [r3, #0]
 8003260:	e002      	b.n	8003268 <_printf_i+0x1c4>
 8003262:	0668      	lsls	r0, r5, #25
 8003264:	d5fb      	bpl.n	800325e <_printf_i+0x1ba>
 8003266:	8019      	strh	r1, [r3, #0]
 8003268:	2300      	movs	r3, #0
 800326a:	4616      	mov	r6, r2
 800326c:	6123      	str	r3, [r4, #16]
 800326e:	e7bc      	b.n	80031ea <_printf_i+0x146>
 8003270:	6833      	ldr	r3, [r6, #0]
 8003272:	2100      	movs	r1, #0
 8003274:	1d1a      	adds	r2, r3, #4
 8003276:	6032      	str	r2, [r6, #0]
 8003278:	681e      	ldr	r6, [r3, #0]
 800327a:	6862      	ldr	r2, [r4, #4]
 800327c:	4630      	mov	r0, r6
 800327e:	f000 f859 	bl	8003334 <memchr>
 8003282:	b108      	cbz	r0, 8003288 <_printf_i+0x1e4>
 8003284:	1b80      	subs	r0, r0, r6
 8003286:	6060      	str	r0, [r4, #4]
 8003288:	6863      	ldr	r3, [r4, #4]
 800328a:	6123      	str	r3, [r4, #16]
 800328c:	2300      	movs	r3, #0
 800328e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003292:	e7aa      	b.n	80031ea <_printf_i+0x146>
 8003294:	4632      	mov	r2, r6
 8003296:	4649      	mov	r1, r9
 8003298:	4640      	mov	r0, r8
 800329a:	6923      	ldr	r3, [r4, #16]
 800329c:	47d0      	blx	sl
 800329e:	3001      	adds	r0, #1
 80032a0:	d0ad      	beq.n	80031fe <_printf_i+0x15a>
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	079b      	lsls	r3, r3, #30
 80032a6:	d413      	bmi.n	80032d0 <_printf_i+0x22c>
 80032a8:	68e0      	ldr	r0, [r4, #12]
 80032aa:	9b03      	ldr	r3, [sp, #12]
 80032ac:	4298      	cmp	r0, r3
 80032ae:	bfb8      	it	lt
 80032b0:	4618      	movlt	r0, r3
 80032b2:	e7a6      	b.n	8003202 <_printf_i+0x15e>
 80032b4:	2301      	movs	r3, #1
 80032b6:	4632      	mov	r2, r6
 80032b8:	4649      	mov	r1, r9
 80032ba:	4640      	mov	r0, r8
 80032bc:	47d0      	blx	sl
 80032be:	3001      	adds	r0, #1
 80032c0:	d09d      	beq.n	80031fe <_printf_i+0x15a>
 80032c2:	3501      	adds	r5, #1
 80032c4:	68e3      	ldr	r3, [r4, #12]
 80032c6:	9903      	ldr	r1, [sp, #12]
 80032c8:	1a5b      	subs	r3, r3, r1
 80032ca:	42ab      	cmp	r3, r5
 80032cc:	dcf2      	bgt.n	80032b4 <_printf_i+0x210>
 80032ce:	e7eb      	b.n	80032a8 <_printf_i+0x204>
 80032d0:	2500      	movs	r5, #0
 80032d2:	f104 0619 	add.w	r6, r4, #25
 80032d6:	e7f5      	b.n	80032c4 <_printf_i+0x220>
 80032d8:	08003483 	.word	0x08003483
 80032dc:	08003494 	.word	0x08003494

080032e0 <memmove>:
 80032e0:	4288      	cmp	r0, r1
 80032e2:	b510      	push	{r4, lr}
 80032e4:	eb01 0402 	add.w	r4, r1, r2
 80032e8:	d902      	bls.n	80032f0 <memmove+0x10>
 80032ea:	4284      	cmp	r4, r0
 80032ec:	4623      	mov	r3, r4
 80032ee:	d807      	bhi.n	8003300 <memmove+0x20>
 80032f0:	1e43      	subs	r3, r0, #1
 80032f2:	42a1      	cmp	r1, r4
 80032f4:	d008      	beq.n	8003308 <memmove+0x28>
 80032f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032fe:	e7f8      	b.n	80032f2 <memmove+0x12>
 8003300:	4601      	mov	r1, r0
 8003302:	4402      	add	r2, r0
 8003304:	428a      	cmp	r2, r1
 8003306:	d100      	bne.n	800330a <memmove+0x2a>
 8003308:	bd10      	pop	{r4, pc}
 800330a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800330e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003312:	e7f7      	b.n	8003304 <memmove+0x24>

08003314 <_sbrk_r>:
 8003314:	b538      	push	{r3, r4, r5, lr}
 8003316:	2300      	movs	r3, #0
 8003318:	4d05      	ldr	r5, [pc, #20]	@ (8003330 <_sbrk_r+0x1c>)
 800331a:	4604      	mov	r4, r0
 800331c:	4608      	mov	r0, r1
 800331e:	602b      	str	r3, [r5, #0]
 8003320:	f7fd fe7c 	bl	800101c <_sbrk>
 8003324:	1c43      	adds	r3, r0, #1
 8003326:	d102      	bne.n	800332e <_sbrk_r+0x1a>
 8003328:	682b      	ldr	r3, [r5, #0]
 800332a:	b103      	cbz	r3, 800332e <_sbrk_r+0x1a>
 800332c:	6023      	str	r3, [r4, #0]
 800332e:	bd38      	pop	{r3, r4, r5, pc}
 8003330:	20000258 	.word	0x20000258

08003334 <memchr>:
 8003334:	4603      	mov	r3, r0
 8003336:	b510      	push	{r4, lr}
 8003338:	b2c9      	uxtb	r1, r1
 800333a:	4402      	add	r2, r0
 800333c:	4293      	cmp	r3, r2
 800333e:	4618      	mov	r0, r3
 8003340:	d101      	bne.n	8003346 <memchr+0x12>
 8003342:	2000      	movs	r0, #0
 8003344:	e003      	b.n	800334e <memchr+0x1a>
 8003346:	7804      	ldrb	r4, [r0, #0]
 8003348:	3301      	adds	r3, #1
 800334a:	428c      	cmp	r4, r1
 800334c:	d1f6      	bne.n	800333c <memchr+0x8>
 800334e:	bd10      	pop	{r4, pc}

08003350 <memcpy>:
 8003350:	440a      	add	r2, r1
 8003352:	4291      	cmp	r1, r2
 8003354:	f100 33ff 	add.w	r3, r0, #4294967295
 8003358:	d100      	bne.n	800335c <memcpy+0xc>
 800335a:	4770      	bx	lr
 800335c:	b510      	push	{r4, lr}
 800335e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003362:	4291      	cmp	r1, r2
 8003364:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003368:	d1f9      	bne.n	800335e <memcpy+0xe>
 800336a:	bd10      	pop	{r4, pc}

0800336c <_realloc_r>:
 800336c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003370:	4607      	mov	r7, r0
 8003372:	4614      	mov	r4, r2
 8003374:	460d      	mov	r5, r1
 8003376:	b921      	cbnz	r1, 8003382 <_realloc_r+0x16>
 8003378:	4611      	mov	r1, r2
 800337a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800337e:	f7ff bc3b 	b.w	8002bf8 <_malloc_r>
 8003382:	b92a      	cbnz	r2, 8003390 <_realloc_r+0x24>
 8003384:	f7ff fbce 	bl	8002b24 <_free_r>
 8003388:	4625      	mov	r5, r4
 800338a:	4628      	mov	r0, r5
 800338c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003390:	f000 f81a 	bl	80033c8 <_malloc_usable_size_r>
 8003394:	4284      	cmp	r4, r0
 8003396:	4606      	mov	r6, r0
 8003398:	d802      	bhi.n	80033a0 <_realloc_r+0x34>
 800339a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800339e:	d8f4      	bhi.n	800338a <_realloc_r+0x1e>
 80033a0:	4621      	mov	r1, r4
 80033a2:	4638      	mov	r0, r7
 80033a4:	f7ff fc28 	bl	8002bf8 <_malloc_r>
 80033a8:	4680      	mov	r8, r0
 80033aa:	b908      	cbnz	r0, 80033b0 <_realloc_r+0x44>
 80033ac:	4645      	mov	r5, r8
 80033ae:	e7ec      	b.n	800338a <_realloc_r+0x1e>
 80033b0:	42b4      	cmp	r4, r6
 80033b2:	4622      	mov	r2, r4
 80033b4:	4629      	mov	r1, r5
 80033b6:	bf28      	it	cs
 80033b8:	4632      	movcs	r2, r6
 80033ba:	f7ff ffc9 	bl	8003350 <memcpy>
 80033be:	4629      	mov	r1, r5
 80033c0:	4638      	mov	r0, r7
 80033c2:	f7ff fbaf 	bl	8002b24 <_free_r>
 80033c6:	e7f1      	b.n	80033ac <_realloc_r+0x40>

080033c8 <_malloc_usable_size_r>:
 80033c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033cc:	1f18      	subs	r0, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	bfbc      	itt	lt
 80033d2:	580b      	ldrlt	r3, [r1, r0]
 80033d4:	18c0      	addlt	r0, r0, r3
 80033d6:	4770      	bx	lr

080033d8 <_init>:
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	bf00      	nop
 80033dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033de:	bc08      	pop	{r3}
 80033e0:	469e      	mov	lr, r3
 80033e2:	4770      	bx	lr

080033e4 <_fini>:
 80033e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e6:	bf00      	nop
 80033e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ea:	bc08      	pop	{r3}
 80033ec:	469e      	mov	lr, r3
 80033ee:	4770      	bx	lr
